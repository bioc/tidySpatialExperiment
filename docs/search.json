[{"path":"/articles/overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview","text":"tidySpatialExperiment provides bridge SpatialExperiment [@righelli2022spatialexperiment] package tidyverse [@wickham2019welcome] ecosystem. creates invisible layer allows interact SpatialExperiment object tibble; enabling use functions dplyr, tidyr, ggplot2 plotly. , underneath, data remains SpatialExperiment object. tidySpatialExperiment also provides three additional utility functions.","code":""},{"path":[]},{"path":"/articles/overview.html","id":"spatialexperiment-tibble-abstraction","dir":"Articles","previous_headings":"Introduction","what":"SpatialExperiment-tibble abstraction","title":"Overview","text":"SpatialExperiment object represents observations (cells) columns variables (features) rows, Bioconductor convention. Additional information cells accessed reducedDims, colData spatialCoords functions. tidySpatialExperiment provides SpatialExperiment-tibble abstraction, representing cells rows features columns, tidyverse convention. colData spatialCoords appended columns abstraction, allowing easy interaction additional data.","code":""},{"path":"/articles/overview.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Overview","text":"can install development version tidySpatialExperiment GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"william-hutchison/tidySpatialExperiment\")"},{"path":"/articles/overview.html","id":"load-data","dir":"Articles","previous_headings":"Introduction","what":"Load data","title":"Overview","text":", load view example SpatialExperiment object. output see SpatialExperiment-tibble abstraction.","code":"# Load example SpatialExperiment object library(tidySpatialExperiment) ## Warning: package 'S4Vectors' was built under R version 4.3.2 ## Warning: package 'GenomeInfoDb' was built under R version 4.3.2 example(read10xVisium) ## Warning: no function found corresponding to methods exports from 'HDF5Array' ## for: 'extract_sparse_array' ## Warning: multiple methods tables found for 'sparsity'"},{"path":"/articles/overview.html","id":"view-data","dir":"Articles","previous_headings":"Introduction","what":"View data","title":"Overview","text":"However, data maintains status SpatialExperiment object. Therefore, access SpatialExperiment functions.","code":"# View the SpatialExperiment-tibble abstraction spe ## # A SpatialExperiment-tibble abstraction: 99 × 7 ## # Features=50 | Cells=99 | Assays=counts ##    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres ##    <chr>              <lgl>         <int>     <int> <chr>                  <int> ##  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 ##  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 ##  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 ##  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 ##  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 ##  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 ##  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 ##  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 ##  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 ## 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 ## # ℹ 89 more rows ## # ℹ 1 more variable: pxl_row_in_fullres <int> spe |>   colData() |>   head() ## DataFrame with 6 rows and 4 columns ##                    in_tissue array_row array_col   sample_id ##                    <logical> <integer> <integer> <character> ## AAACAACGAATAGTTC-1     FALSE         0        16    section1 ## AAACAAGTATCTCCCA-1      TRUE        50       102    section1 ## AAACAATCTACTAGCA-1      TRUE         3        43    section1 ## AAACACCAATAACTGC-1      TRUE        59        19    section1 ## AAACAGAGCGACTCCT-1      TRUE        14        94    section1 ## AAACAGCTTTCAGAAG-1     FALSE        43         9    section1 spe |>    spatialCoords() |>   head() ##                    pxl_col_in_fullres pxl_row_in_fullres ## AAACAACGAATAGTTC-1               2312               1252 ## AAACAAGTATCTCCCA-1               8230               7237 ## AAACAATCTACTAGCA-1               4170               1611 ## AAACACCAATAACTGC-1               2519               8315 ## AAACAGAGCGACTCCT-1               7679               2927 ## AAACAGCTTTCAGAAG-1               1831               6400 spe |>   imgData() ## DataFrame with 2 rows and 4 columns ##     sample_id    image_id   data scaleFactor ##   <character> <character> <list>   <numeric> ## 1    section1      lowres   ####   0.0510334 ## 2    section2      lowres   ####   0.0510334"},{"path":[]},{"path":"/articles/overview.html","id":"manipulate-with-dplyr","dir":"Articles","previous_headings":"Integration with the tidyverse ecosystem","what":"Manipulate with dplyr","title":"Overview","text":"functions dplyr available use SpatialExperiment-tibble abstraction. example, filter can used select cells variable interest. mutate can used add new variables, modify value existing variable.","code":"spe |>   filter(array_col < 5) ## # A SpatialExperiment-tibble abstraction: 6 × 7 ## # Features=50 | Cells=6 | Assays=counts ##   .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres ##   <chr>              <lgl>         <int>     <int> <chr>                  <int> ## 1 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 ## 2 AAACGAAGATGGAGTA-1 FALSE            58         4 section1                1487 ## 3 AAAGAATGACCTTAGA-1 FALSE            64         2 section1                1349 ## 4 AAACATGGTGAGAGGA-1 FALSE            62         0 section2                1212 ## 5 AAACGAAGATGGAGTA-1 FALSE            58         4 section2                1487 ## 6 AAAGAATGACCTTAGA-1 FALSE            64         2 section2                1349 ## # ℹ 1 more variable: pxl_row_in_fullres <int> spe |>   mutate(in_region = c(in_tissue & array_row < 10)) ## # A SpatialExperiment-tibble abstraction: 99 × 8 ## # Features=50 | Cells=99 | Assays=counts ##    .cell    in_tissue array_row array_col sample_id in_region pxl_col_in_fullres ##    <chr>    <lgl>         <int>     <int> <chr>     <lgl>                  <int> ##  1 AAACAAC… FALSE             0        16 section1  FALSE                   2312 ##  2 AAACAAG… TRUE             50       102 section1  FALSE                   8230 ##  3 AAACAAT… TRUE              3        43 section1  TRUE                    4170 ##  4 AAACACC… TRUE             59        19 section1  FALSE                   2519 ##  5 AAACAGA… TRUE             14        94 section1  FALSE                   7679 ##  6 AAACAGC… FALSE            43         9 section1  FALSE                   1831 ##  7 AAACAGG… FALSE            47        13 section1  FALSE                   2106 ##  8 AAACAGT… FALSE            73        43 section1  FALSE                   4170 ##  9 AAACATG… FALSE            62         0 section1  FALSE                   1212 ## 10 AAACATT… FALSE            61        97 section1  FALSE                   7886 ## # ℹ 89 more rows ## # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/articles/overview.html","id":"tidy-with-tidyr","dir":"Articles","previous_headings":"Integration with the tidyverse ecosystem","what":"Tidy with tidyr","title":"Overview","text":"functions tidyr also available. , nest used group data sample_id, unnest used ungroup data.","code":"# Nest the SpatialExperiment object by sample_id spe_nested <-   spe |>    nest(data = -sample_id)  # View the nested SpatialExperiment object spe_nested ## # A tibble: 2 × 2 ##   sample_id data            ##   <chr>     <list>          ## 1 section1  <SptlExpr[,50]> ## 2 section2  <SptlExpr[,49]> # Unnest the nested SpatialExperiment objects spe_nested |>   unnest(data) ## # A SpatialExperiment-tibble abstraction: 99 × 7 ## # Features=50 | Cells=99 | Assays=counts ##    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres ##    <chr>              <lgl>         <int>     <int> <chr>                  <int> ##  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 ##  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 ##  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 ##  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 ##  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 ##  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 ##  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 ##  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 ##  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 ## 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 ## # ℹ 89 more rows ## # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/articles/overview.html","id":"plot-with-ggplot2","dir":"Articles","previous_headings":"Integration with the tidyverse ecosystem","what":"Plot with ggplot2","title":"Overview","text":"ggplot function can used create plot SpatialExperiment object. example also demonstrates tidy operations can combined build complex analysis. noted helper functions aes included imported ggplot2.","code":"spe |>   filter(sample_id == \"section1\" & in_tissue) |>      # Add a column with the sum of feature counts per cell   mutate(count_sum = purrr::map_int(.cell, ~     spe[, .x] |>        counts() |>        sum()     )) |>      # Plot with tidySpatialExperiment and ggplot2   ggplot(ggplot2::aes(x = reorder(.cell, count_sum), y = count_sum)) +   ggplot2::geom_point() +   ggplot2::coord_flip()"},{"path":"/articles/overview.html","id":"plot-with-plotly","dir":"Articles","previous_headings":"Integration with the tidyverse ecosystem","what":"Plot with plotly","title":"Overview","text":"plot_ly function can also used create plot SpatialExperiment object.","code":"spe |>   filter(sample_id == \"section1\") |>   plot_ly(     x = ~ array_col,      y = ~ array_row,      color = ~ in_tissue,      type = \"scatter\"   )"},{"path":[]},{"path":"/articles/overview.html","id":"interactively-select-cells-with-tidygate","dir":"Articles","previous_headings":"Integration with the tidyomics ecosystem","what":"Interactively select cells with tidygate","title":"Overview","text":"Different packages tidyomics ecosystem easy use together. run R Console, following code lunch tidygate interactively gate cells based array location. gated cells can divided pseudobulks within SummarizedExperiment object using tidySpatialExperiment’s aggregate_cells utility function.","code":"spe_regions <-   spe |>    filter(sample_id == \"section1\") |>   mutate(region = tidygate::gate_chr(array_col, array_row)) spe_regions_aggregated <-   spe_regions |>   aggregate_cells(region)"},{"path":[]},{"path":"/articles/overview.html","id":"read-only-columns","dir":"Articles","previous_headings":"Important considerations","what":"Read-only columns","title":"Overview","text":"Removing .cell column return tibble. consistent behaviour tidyomics packages. sample_id column removed tidyverse functions, can modified changes accepted SpatialExperiment’s colData function. pxl_col_in_fullres px_row_in_fullres columns removed modified tidyverse functions. consistent behaviour dimension reduction data tidyomics packages.","code":"spe |>   select(-.cell) |>   head() ## tidySpatialExperiment says: Key columns are missing. A data frame is returned for independent data analysis. ## # A tibble: 6 × 4 ##   in_tissue array_row array_col sample_id ##   <lgl>         <int>     <int> <chr>     ## 1 FALSE             0        16 section1  ## 2 TRUE             50       102 section1  ## 3 TRUE              3        43 section1  ## 4 TRUE             59        19 section1  ## 5 TRUE             14        94 section1  ## 6 FALSE            43         9 section1 # sample_id is not removed, despite the user's request spe |>   select(-sample_id) ## # A SpatialExperiment-tibble abstraction: 99 × 7 ## # Features=50 | Cells=99 | Assays=counts ##    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres ##    <chr>              <lgl>         <int>     <int> <chr>                  <int> ##  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 ##  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 ##  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 ##  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 ##  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 ##  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 ##  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 ##  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 ##  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 ## 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 ## # ℹ 89 more rows ## # ℹ 1 more variable: pxl_row_in_fullres <int> # This change maintains separation of sample_ids and is permitted spe |>    mutate(sample_id = stringr::str_c(sample_id, \"_modified\")) |>   head() ## # A SpatialExperiment-tibble abstraction: 99 × 7 ## # Features=6 | Cells=99 | Assays=counts ##    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres ##    <chr>              <lgl>         <int>     <int> <chr>                  <int> ##  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1…               2312 ##  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1…               8230 ##  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1…               4170 ##  4 AAACACCAATAACTGC-1 TRUE             59        19 section1…               2519 ##  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1…               7679 ##  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1…               1831 ##  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1…               2106 ##  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1…               4170 ##  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1…               1212 ## 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1…               7886 ## # ℹ 89 more rows ## # ℹ 1 more variable: pxl_row_in_fullres <int> # This change does not maintain separation of sample_ids and produces an error spe |>   mutate(sample_id = \"new_sample\") ## Error in .local(x, ..., value): Number of unique 'sample_id's is 2, but 1 was provided. # Attempting to remove pxl_col_in_fullres produces an error spe |>   select(-pxl_col_in_fullres) ## Error in `select_helper()`: ## ! Can't subset columns that don't exist. ## ✖ Column `pxl_col_in_fullres` doesn't exist. # Attempting to modify pxl_col_in_fullres produces an error spe |>    mutate(pxl_col_in_fullres) ## Error in `dplyr::mutate()`: ## ℹ In argument: `pxl_col_in_fullres`. ## Caused by error: ## ! object 'pxl_col_in_fullres' not found"},{"path":"/articles/overview.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Overview","text":"","code":"## R version 4.3.1 (2023-06-16) ## Platform: x86_64-apple-darwin20 (64-bit) ## Running under: macOS Ventura 13.5 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib  ## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: Australia/Melbourne ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] tidySpatialExperiment_0.99.8    tidySummarizedExperiment_1.12.0 ##  [3] ggplot2_3.4.4                   ttservice_0.4.0                 ##  [5] tidyr_1.3.0                     dplyr_1.1.4                     ##  [7] tidySingleCellExperiment_1.13.3 SpatialExperiment_1.12.0        ##  [9] SingleCellExperiment_1.24.0     SummarizedExperiment_1.32.0     ## [11] Biobase_2.62.0                  GenomicRanges_1.54.1            ## [13] GenomeInfoDb_1.38.5             IRanges_2.36.0                  ## [15] S4Vectors_0.40.2                BiocGenerics_0.48.1             ## [17] MatrixGenerics_1.14.0           matrixStats_1.2.0               ## [19] BiocStyle_2.28.1                ##  ## loaded via a namespace (and not attached): ##  [1] bitops_1.0-7              rlang_1.1.2               ##  [3] magrittr_2.0.3            compiler_4.3.1            ##  [5] DelayedMatrixStats_1.22.6 systemfonts_1.0.5         ##  [7] vctrs_0.6.5               stringr_1.5.1             ##  [9] pkgconfig_2.0.3           crayon_1.5.2              ## [11] fastmap_1.1.1             magick_2.8.2              ## [13] XVector_0.42.0            ellipsis_0.3.2            ## [15] labeling_0.4.3            scuttle_1.10.3            ## [17] utf8_1.2.4                rmarkdown_2.25            ## [19] ragg_1.2.7                purrr_1.0.2               ## [21] xfun_0.41                 beachmat_2.16.0           ## [23] zlibbioc_1.48.0           cachem_1.0.8              ## [25] jsonlite_1.8.8            highr_0.10                ## [27] rhdf5filters_1.12.1       DelayedArray_0.28.0       ## [29] Rhdf5lib_1.24.1           BiocParallel_1.36.0       ## [31] parallel_4.3.1            R6_2.5.1                  ## [33] RColorBrewer_1.1-3        bslib_0.6.1               ## [35] stringi_1.8.3             limma_3.56.2              ## [37] jquerylib_0.1.4           Rcpp_1.0.11               ## [39] bookdown_0.37             knitr_1.45                ## [41] R.utils_2.12.3            Matrix_1.6-4              ## [43] tidyselect_1.2.0          rstudioapi_0.15.0         ## [45] abind_1.4-5               yaml_2.3.8                ## [47] codetools_0.2-19          lattice_0.22-5            ## [49] tibble_3.2.1              withr_2.5.2               ## [51] evaluate_0.23             desc_1.4.3                ## [53] pillar_1.9.0              BiocManager_1.30.22       ## [55] plotly_4.10.3             generics_0.1.3            ## [57] RCurl_1.98-1.13           sparseMatrixStats_1.12.2  ## [59] munsell_0.5.0             scales_1.3.0              ## [61] glue_1.6.2                lazyeval_0.2.2            ## [63] tools_4.3.1               data.table_1.14.10        ## [65] locfit_1.5-9.8            fs_1.6.3                  ## [67] rhdf5_2.44.0              grid_4.3.1                ## [69] crosstalk_1.2.1           edgeR_3.42.4              ## [71] DropletUtils_1.20.0       colorspace_2.1-0          ## [73] GenomeInfoDbData_1.2.11   HDF5Array_1.28.1          ## [75] cli_3.6.2                 textshaping_0.3.7         ## [77] fansi_1.0.6               S4Arrays_1.2.0            ## [79] viridisLite_0.4.2         gtable_0.3.4              ## [81] R.methodsS3_1.8.2         sass_0.4.8                ## [83] digest_0.6.33             dqrng_0.3.2               ## [85] SparseArray_1.2.3         farver_2.1.1              ## [87] rjson_0.2.21              htmlwidgets_1.6.4         ## [89] memoise_2.0.1             htmltools_0.5.7           ## [91] pkgdown_2.0.7             R.oo_1.25.0               ## [93] lifecycle_1.0.4           httr_1.4.7"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Hutchison. Author, maintainer. Stefano Mangiola. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hutchison W, Mangiola S (2024). tidySpatialExperiment: Brings SpatialExperiment tidyverse. R package version 0.99.8, https://github.com/william-hutchison/tidySpatialExperiment.","code":"@Manual{,   title = {tidySpatialExperiment: Brings SpatialExperiment to the tidyverse},   author = {William Hutchison and Stefano Mangiola},   year = {2024},   note = {R package version 0.99.8},   url = {https://github.com/william-hutchison/tidySpatialExperiment}, }"},{"path":"/index.html","id":"tidyspatialexperiment---part-of-tidyomics-","dir":"","previous_headings":"","what":"Brings SpatialExperiment to the tidyverse ","title":"Brings SpatialExperiment to the tidyverse ","text":"can find packages tidyomics ecosystem : tidySingleCellExperiment tidy manipulation SingleCellExperiment objects. tidySummarizedExperiment tidy manipulation SummarizedExperiment objects. tidyseurat tidy manipulation Seurat objects. tidybulk tidy bulk RNA-seq data analysis. nanny tidy high-level data analysis manipulation. tidygate adding custom gate information tibble. tidyHeatmap heatmaps produced tidy principles.","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Brings SpatialExperiment to the tidyverse ","text":"tidySpatialExperiment provides bridge SpatialExperiment [@righelli2022spatialexperiment] package tidyverse [@wickham2019welcome] ecosystem. creates invisible layer allows interact SpatialExperiment object tibble; enabling use functions dplyr, tidyr, ggplot2 plotly. , underneath, data remains SpatialExperiment object. tidySpatialExperiment also provides three additional utility functions.","code":""},{"path":[]},{"path":"/index.html","id":"spatialexperiment-tibble-abstraction","dir":"","previous_headings":"","what":"SpatialExperiment-tibble abstraction","title":"Brings SpatialExperiment to the tidyverse ","text":"SpatialExperiment object represents observations (cells) columns variables (features) rows, Bioconductor convention. Additional information cells accessed reducedDims, colData spatialCoords functions. tidySpatialExperiment provides SpatialExperiment-tibble abstraction, representing cells rows features columns, tidyverse convention. colData spatialCoords appended columns abstraction, allowing easy interaction additional data.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Brings SpatialExperiment to the tidyverse ","text":"can install development version tidySpatialExperiment GitHub :","code":"install.packages(\"devtools\") devtools::install_github(\"william-hutchison/tidySpatialExperiment\")"},{"path":"/index.html","id":"load-data","dir":"","previous_headings":"","what":"Load data","title":"Brings SpatialExperiment to the tidyverse ","text":", load example SpatialExperiment object.","code":"# Load example SpatialExperiment object library(tidySpatialExperiment) example(read10xVisium)"},{"path":"/index.html","id":"view-data","dir":"","previous_headings":"","what":"View data","title":"Brings SpatialExperiment to the tidyverse ","text":"default view now SpatialExperiment-tibble abstraction. However, data maintains status SpatialExperiment object. Therefore, access SpatialExperiment functions.","code":"spe #  # A SpatialExperiment-tibble abstraction: 99 × 7 #  # [90mFeatures=50 | Cells=99 | Assays=counts[0m #    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #    <chr>              <lgl>         <int>     <int> <chr>                  <int> #  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #  # ℹ 94 more rows #  # ℹ 1 more variable: pxl_row_in_fullres <int> spe |>   colData() |>   head() #  DataFrame with 6 rows and 4 columns #                     in_tissue array_row array_col   sample_id #                     <logical> <integer> <integer> <character> #  AAACAACGAATAGTTC-1     FALSE         0        16    section1 #  AAACAAGTATCTCCCA-1      TRUE        50       102    section1 #  AAACAATCTACTAGCA-1      TRUE         3        43    section1 #  AAACACCAATAACTGC-1      TRUE        59        19    section1 #  AAACAGAGCGACTCCT-1      TRUE        14        94    section1 #  AAACAGCTTTCAGAAG-1     FALSE        43         9    section1  spe |>    spatialCoords() |>   head() #                     pxl_col_in_fullres pxl_row_in_fullres #  AAACAACGAATAGTTC-1               2312               1252 #  AAACAAGTATCTCCCA-1               8230               7237 #  AAACAATCTACTAGCA-1               4170               1611 #  AAACACCAATAACTGC-1               2519               8315 #  AAACAGAGCGACTCCT-1               7679               2927 #  AAACAGCTTTCAGAAG-1               1831               6400  spe |>   imgData() #  DataFrame with 2 rows and 4 columns #      sample_id    image_id   data scaleFactor #    <character> <character> <list>   <numeric> #  1    section1      lowres   ####   0.0510334 #  2    section2      lowres   ####   0.0510334"},{"path":[]},{"path":"/index.html","id":"manipulate-with-dplyr","dir":"","previous_headings":"","what":"Manipulate with dplyr","title":"Brings SpatialExperiment to the tidyverse ","text":"functions dplyr available use SpatialExperiment-tibble abstraction. example, filter can used select cells variable interest. mutate can used add new variables, modify value existing variable.","code":"spe |>   filter(array_col < 5) #  # A SpatialExperiment-tibble abstraction: 6 × 7 #  # [90mFeatures=50 | Cells=6 | Assays=counts[0m #    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #    <chr>              <lgl>         <int>     <int> <chr>                  <int> #  1 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #  2 AAACGAAGATGGAGTA-1 FALSE            58         4 section1                1487 #  3 AAAGAATGACCTTAGA-1 FALSE            64         2 section1                1349 #  4 AAACATGGTGAGAGGA-1 FALSE            62         0 section2                1212 #  5 AAACGAAGATGGAGTA-1 FALSE            58         4 section2                1487 #  # ℹ 1 more row #  # ℹ 1 more variable: pxl_row_in_fullres <int> spe |>   mutate(in_region = c(in_tissue & array_row < 10)) #  # A SpatialExperiment-tibble abstraction: 99 × 8 #  # [90mFeatures=50 | Cells=99 | Assays=counts[0m #    .cell     in_tissue array_row array_col sample_id in_region pxl_col_in_fullres #    <chr>     <lgl>         <int>     <int> <chr>     <lgl>                  <int> #  1 AAACAACG… FALSE             0        16 section1  FALSE                   2312 #  2 AAACAAGT… TRUE             50       102 section1  FALSE                   8230 #  3 AAACAATC… TRUE              3        43 section1  TRUE                    4170 #  4 AAACACCA… TRUE             59        19 section1  FALSE                   2519 #  5 AAACAGAG… TRUE             14        94 section1  FALSE                   7679 #  # ℹ 94 more rows #  # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/index.html","id":"tidy-with-tidyr","dir":"","previous_headings":"","what":"Tidy with tidyr","title":"Brings SpatialExperiment to the tidyverse ","text":"functions tidyr also available. , nest used group data sample_id, unnest used ungroup data.","code":"# Nest the SpatialExperiment object by sample_id spe_nested <-   spe |>    nest(data = -sample_id)  # View the nested SpatialExperiment object spe_nested #  # A tibble: 2 × 2 #    sample_id data            #    <chr>     <list>          #  1 section1  <SptlExpr[,50]> #  2 section2  <SptlExpr[,49]>  # Unnest the nested SpatialExperiment objects spe_nested |>   unnest(data) #  # A SpatialExperiment-tibble abstraction: 99 × 7 #  # [90mFeatures=50 | Cells=99 | Assays=counts[0m #    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #    <chr>              <lgl>         <int>     <int> <chr>                  <int> #  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #  # ℹ 94 more rows #  # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/index.html","id":"plot-with-ggplot2","dir":"","previous_headings":"","what":"Plot with ggplot2","title":"Brings SpatialExperiment to the tidyverse ","text":"ggplot function can used create plot SpatialExperiment object. example also demonstrates tidy operations can combined build complex analysis. noted helper functions aes included imported ggplot2.","code":"spe |>   filter(sample_id == \"section1\" & in_tissue) |>      # Add a column with the sum of feature counts per cell   mutate(count_sum = purrr::map_int(.cell, ~     spe[, .x] |>        counts() |>        sum()     )) |>      # Plot with tidySpatialExperiment and ggplot2   ggplot(ggplot2::aes(x = reorder(.cell, count_sum), y = count_sum)) +   ggplot2::geom_point() +   ggplot2::coord_flip()"},{"path":"/index.html","id":"plot-with-plotly","dir":"","previous_headings":"","what":"Plot with plotly","title":"Brings SpatialExperiment to the tidyverse ","text":"plot_ly function can also used create plot SpatialExperiment object.","code":"spe |>   filter(sample_id == \"section1\") |>   plot_ly(     x = ~ array_col,      y = ~ array_row,      color = ~ in_tissue,      type = \"scatter\"   )"},{"path":[]},{"path":"/index.html","id":"interactively-select-cells-with-tidygate","dir":"","previous_headings":"","what":"Interactively select cells with tidygate","title":"Brings SpatialExperiment to the tidyverse ","text":"Different packages tidyomics ecosystem easy use together. , tidygate used interactively gate cells based array location.  gated cells can divided pseudobulks within SummarizedExperiment object using tidySpatialExperiment’s aggregate_cells utility function.","code":"spe_regions <-   spe |>    filter(sample_id == \"section1\") |>   mutate(region = tidygate::gate_chr(array_col, array_row)) spe_regions_aggregated <-   spe_regions |>   aggregate_cells(region)"},{"path":[]},{"path":"/index.html","id":"read-only-columns","dir":"","previous_headings":"","what":"Read-only columns","title":"Brings SpatialExperiment to the tidyverse ","text":"Removing .cell column return tibble. consistent behaviour tidyomics packages. sample_id column removed tidyverse functions, can modified changes accepted SpatialExperiment’s colData function. pxl_col_in_fullres px_row_in_fullres columns removed modified tidyverse functions. consistent behaviour dimension reduction data tidyomics packages.","code":"spe |>   select(-.cell) |>   head() #  tidySpatialExperiment says: Key columns are missing. A data frame is returned for independent data analysis. #  # A tibble: 6 × 4 #    in_tissue array_row array_col sample_id #    <lgl>         <int>     <int> <chr>     #  1 FALSE             0        16 section1  #  2 TRUE             50       102 section1  #  3 TRUE              3        43 section1  #  4 TRUE             59        19 section1  #  5 TRUE             14        94 section1  #  # ℹ 1 more row # sample_id is not removed, despite the user's request spe |>   select(-sample_id) #  # A SpatialExperiment-tibble abstraction: 99 × 7 #  # [90mFeatures=50 | Cells=99 | Assays=counts[0m #    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #    <chr>              <lgl>         <int>     <int> <chr>                  <int> #  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #  # ℹ 94 more rows #  # ℹ 1 more variable: pxl_row_in_fullres <int>  # This change maintains separation of sample_ids and is permitted spe |>    mutate(sample_id = stringr::str_c(sample_id, \"_modified\")) |>   head() #  # A SpatialExperiment-tibble abstraction: 99 × 7 #  # [90mFeatures=6 | Cells=99 | Assays=counts[0m #    .cell              in_tissue array_row array_col sample_id  pxl_col_in_fullres #    <chr>              <lgl>         <int>     <int> <chr>                   <int> #  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1_…               2312 #  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1_…               8230 #  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1_…               4170 #  4 AAACACCAATAACTGC-1 TRUE             59        19 section1_…               2519 #  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1_…               7679 #  # ℹ 94 more rows #  # ℹ 1 more variable: pxl_row_in_fullres <int>  # This change does not maintain separation of sample_ids and produces an error spe |>   mutate(sample_id = \"new_sample\") #  Error in .local(x, ..., value): Number of unique 'sample_id's is 2, but 1 was provided. # Attempting to remove pxl_col_in_fullres produces an error spe |>   select(-pxl_col_in_fullres) #  Error in `select_helper()`: #  ! Can't subset columns that don't exist. #  ✖ Column `pxl_col_in_fullres` doesn't exist.  # Attempting to modify pxl_col_in_fullres produces an error spe |>    mutate(pxl_col_in_fullres) #  Error in `dplyr::mutate()`: #  ℹ In argument: `pxl_col_in_fullres`. #  Caused by error: #  ! object 'pxl_col_in_fullres' not found"},{"path":"/reference/add_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Add class to abject — add_class","title":"Add class to abject — add_class","text":"Add class abject","code":""},{"path":"/reference/add_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add class to abject — add_class","text":"","code":"add_class(var, name)"},{"path":"/reference/add_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add class to abject — add_class","text":"var tibble name character name attribute","code":""},{"path":"/reference/add_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add class to abject — add_class","text":"tibble additional attribute","code":""},{"path":"/reference/aggregate_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate cells — aggregate_cells","title":"Aggregate cells — aggregate_cells","text":"Combine cells groups based shared variables aggregate feature counts.","code":""},{"path":"/reference/aggregate_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate cells — aggregate_cells","text":"","code":"aggregate_cells(   .data,   .sample = NULL,   slot = \"data\",   assays = NULL,   aggregation_function = rowSums )"},{"path":"/reference/aggregate_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate cells — aggregate_cells","text":".data tidySpatialExperiment object .sample vector variables cells aggregated slot slot function applied assays assay function applied aggregation_function method cell-feature value aggregation","code":""},{"path":"/reference/aggregate_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate cells — aggregate_cells","text":"SummarizedExperiment object","code":""},{"path":"/reference/aggregate_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate cells — aggregate_cells","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> Warning: no function found corresponding to methods exports from ‘HDF5Array’ for: ‘extract_sparse_array’ #> Warning: multiple methods tables found for ‘sparsity’ #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     aggregate_cells(sample_id, assays = \"counts\") #> # A SummarizedExperiment-tibble abstraction: 100 × 6 #> # Features=50 | Samples=2 | Assays=counts #>    .feature           .sample  counts sample_id .aggregated_cells feature        #>    <chr>              <chr>     <dbl> <chr>                 <int> <chr>          #>  1 ENSMUSG00000002459 section1     13 section1                 50 ENSMUSG000000… #>  2 ENSMUSG00000005886 section1     17 section1                 50 ENSMUSG000000… #>  3 ENSMUSG00000016918 section1     18 section1                 50 ENSMUSG000000… #>  4 ENSMUSG00000025900 section1      0 section1                 50 ENSMUSG000000… #>  5 ENSMUSG00000025902 section1      5 section1                 50 ENSMUSG000000… #>  6 ENSMUSG00000025903 section1     15 section1                 50 ENSMUSG000000… #>  7 ENSMUSG00000025905 section1      9 section1                 50 ENSMUSG000000… #>  8 ENSMUSG00000025907 section1     50 section1                 50 ENSMUSG000000… #>  9 ENSMUSG00000025909 section1      5 section1                 50 ENSMUSG000000… #> 10 ENSMUSG00000025911 section1     11 section1                 50 ENSMUSG000000… #> # ℹ 40 more rows"},{"path":"/reference/arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange","title":"Order rows using column values — arrange","text":"arrange() orders rows data frame values selected columns. Unlike dplyr verbs, arrange() largely ignores grouping; need explicitly mention grouping variables (use  .by_group = TRUE) order group , functions variables evaluated per data frame, per group.","code":""},{"path":"/reference/arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order rows using column values — arrange","text":"object type .data. output following properties: rows appear output, (usually) different place. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":[]},{"path":"/reference/arrange.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Order rows using column values — arrange","text":"Unlike base sorting sort(), NA : always sorted end local data, even wrapped desc(). treated differently remote data, depending backend.","code":""},{"path":"/reference/arrange.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Order rows using column values — arrange","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment) .","code":""},{"path":[]},{"path":"/reference/arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334  spe |>     arrange(array_row) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAAGACATGAAGTTTA-1 FALSE             0        92 section1                7541 #>  3 AAAGGTCAACGACATG-1 FALSE             0       112 section1                8917 #>  4 AAAGACATGAAGTTTA-1 FALSE             0        92 section1                7541 #>  5 AAAGGTCAACGACATG-1 FALSE             0       112 section1                8917 #>  6 AAACGGGTTGGTATCC-1 FALSE             1        23 section1                2794 #>  7 AAACGGGTTGGTATCC-1 FALSE             1        23 section1                2794 #>  8 AAACGACAGTCTTGCC-1 FALSE             2       118 section1                9330 #>  9 AAACGACAGTCTTGCC-1 FALSE             2       118 section1                9330 #> 10 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/as_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce lists, matrices, and more to data frames — as_tibble","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"as_tibble() turns existing object, data frame matrix, -called tibble, data frame class tbl_df. contrast tibble(), builds tibble individual columns. as_tibble() tibble() base::.data.frame() base::data.frame(). as_tibble() S3 generic, methods : data.frame: Thin wrapper around list method implements tibble's treatment rownames. matrix, poly, ts, table Default: inputs first coerced base::.data.frame(). as_tibble_row() converts vector tibble one row. input list, elements must size one. as_tibble_col() converts vector tibble one column.","code":""},{"path":"/reference/as_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"","code":"# S3 method for SpatialExperiment as_tibble(   x,   ...,   .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"),   rownames = pkgconfig::get_config(\"tibble::rownames\", NULL) )"},{"path":"/reference/as_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"x data frame, list, matrix, object reasonably coerced tibble. ... Unused, extensibility. .name_repair Treatment problematic column names: \"minimal\": name repair checks, beyond basic existence, \"unique\": Make sure names unique empty, \"check_unique\": (default value), name repair, check unique, \"universal\": Make names unique syntactic function: apply custom name repair (e.g., .name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function() argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . rownames treat existing row names data frame matrix: NULL: remove row names. default. NA: keep row names. string: name new column. Existing rownames transferred column row.names attribute deleted. name repair applied new column name, even x already contains column name. Use as_tibble(rownames_to_column(...)) safeguard case. Read rownames.","code":""},{"path":"/reference/as_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"tibble","code":""},{"path":"/reference/as_tibble.html","id":"row-names","dir":"Reference","previous_headings":"","what":"Row names","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"default behavior silently remove row names. New code explicitly convert row names new column using rownames argument. existing code relies retention row names, call pkgconfig::set_config(\"tibble::rownames\" = NA) script package's .onLoad()  function.","code":""},{"path":"/reference/as_tibble.html","id":"life-cycle","dir":"Reference","previous_headings":"","what":"Life cycle","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"Using as_tibble() vectors superseded version 3.0.0, prefer expressive as_tibble_row() as_tibble_col() variants new code.","code":""},{"path":[]},{"path":"/reference/as_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce lists, matrices, and more to data frames — as_tibble","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     as_tibble() #> # A tibble: 99 × 7 #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/bind_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiently bind multiple data frames by row and column — bind_cols","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one. efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one.","code":""},{"path":"/reference/bind_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"","code":"# S3 method for SpatialExperiment bind_cols(..., .id = NULL)"},{"path":"/reference/bind_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"... Data frames combine. argument can either data frame, list data   frame, list data frames. row-binding, columns matched name, missing   columns filled NA. column-binding, rows matched position, data   frames must number rows. match value,   position, see mutate-joins. .id Data frame identifier. `.id` supplied, new column identifiers   created link row original data frame. labels   taken named arguments `bind_rows()`.   list data frames supplied, labels taken   names list. names found numeric sequence   used instead.","code":""},{"path":"/reference/bind_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"`bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`. `bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`.","code":""},{"path":"/reference/bind_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"output `bind_rows()` contain column column appears inputs. output `bind_rows()` contain column column appears inputs.","code":""},{"path":"/reference/bind_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiently bind multiple data frames by row and column — bind_cols","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>    bind_cols(1:99) #> New names: #> • `` -> `...5` #> # A SpatialExperiment-tibble abstraction: 99 × 8 #> # Features=50 | Cells=99 | Assays=counts #>    .cell        in_tissue array_row array_col sample_id  ...5 pxl_col_in_fullres #>    <chr>        <lgl>         <int>     <int> <chr>     <int>              <int> #>  1 AAACAACGAAT… FALSE             0        16 section1      1               2312 #>  2 AAACAAGTATC… TRUE             50       102 section1      2               8230 #>  3 AAACAATCTAC… TRUE              3        43 section1      3               4170 #>  4 AAACACCAATA… TRUE             59        19 section1      4               2519 #>  5 AAACAGAGCGA… TRUE             14        94 section1      5               7679 #>  6 AAACAGCTTTC… FALSE            43         9 section1      6               1831 #>  7 AAACAGGGTCT… FALSE            47        13 section1      7               2106 #>  8 AAACAGTGTTC… FALSE            73        43 section1      8               4170 #>  9 AAACATGGTGA… FALSE            62         0 section1      9               1212 #> 10 AAACATTTCCC… FALSE            61        97 section1     10               7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/bind_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiently bind multiple data frames by row and column — bind_rows","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one. efficient implementation common pattern `.call(rbind, dfs)` `.call(cbind, dfs)` binding many data frames one.","code":""},{"path":"/reference/bind_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"","code":"# S3 method for SpatialExperiment bind_rows(..., .id = NULL, add.cell.ids = NULL)"},{"path":"/reference/bind_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"... Data frames combine. argument can either data frame, list data   frame, list data frames. row-binding, columns matched name, missing   columns filled NA. column-binding, rows matched position, data   frames must number rows. match value,   position, see mutate-joins. .id Data frame identifier. `.id` supplied, new column identifiers   created link row original data frame. labels   taken named arguments `bind_rows()`.   list data frames supplied, labels taken   names list. names found numeric sequence   used instead. add.cell.ids Seurat 3.0 character vector length(x = c(x, y)). Appends corresponding values start objects' cell names.","code":""},{"path":"/reference/bind_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"`bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`. `bind_rows()` `bind_cols()` return type   first input, either data frame, `tbl_df`, `grouped_df`.","code":""},{"path":"/reference/bind_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"output `bind_rows()` contain column column appears inputs. output `bind_rows()` contain column column appears inputs.","code":""},{"path":"/reference/bind_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiently bind multiple data frames by row and column — bind_rows","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     bind_rows(spe) #> # A SpatialExperiment-tibble abstraction: 198 × 7 #> # Features=50 | Cells=198 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 188 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — add_count.SpatialExperiment","title":"Count the observations in each group — add_count.SpatialExperiment","text":"count() lets quickly count unique values one variables: df %>% count(, b) roughly equivalent df %>% group_by(, b) %>% summarise(n = n()). count() paired tally(), lower-level helper equivalent df %>% summarise(n = n()). Supply wt perform weighted counts, switching summary n = n() n = sum(wt). add_count() add_tally() equivalents count() tally() use mutate() instead summarise() add new column group-wise counts.","code":""},{"path":"/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — add_count.SpatialExperiment","text":"","code":"# S3 method for SpatialExperiment add_count(x, ..., wt = NULL, sort = FALSE, name = NULL)"},{"path":"/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — add_count.SpatialExperiment","text":"x data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <data-masking> Variables group . wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, use nn. column called n nn, 'll use nnn, , adding ns gets new name.","code":""},{"path":"/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the observations in each group — add_count.SpatialExperiment","text":"object type .data. count() add_count() group transiently, output groups input.","code":""},{"path":"/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — add_count.SpatialExperiment","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     count() #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 1 × 1 #>       n #>   <int> #> 1    99 spe |>     add_count() #> # A SpatialExperiment-tibble abstraction: 99 × 8 #> # Features=50 | Cells=99 | Assays=counts #>    .cell        in_tissue array_row array_col sample_id     n pxl_col_in_fullres #>    <chr>        <lgl>         <int>     <int> <chr>     <int>              <int> #>  1 AAACAACGAAT… FALSE             0        16 section1     99               2312 #>  2 AAACAAGTATC… TRUE             50       102 section1     99               8230 #>  3 AAACAATCTAC… TRUE              3        43 section1     99               4170 #>  4 AAACACCAATA… TRUE             59        19 section1     99               2519 #>  5 AAACAGAGCGA… TRUE             14        94 section1     99               7679 #>  6 AAACAGCTTTC… FALSE            43         9 section1     99               1831 #>  7 AAACAGGGTCT… FALSE            47        13 section1     99               2106 #>  8 AAACAGTGTTC… FALSE            73        43 section1     99               4170 #>  9 AAACATGGTGA… FALSE            62         0 section1     99               1212 #> 10 AAACATTTCCC… FALSE            61        97 section1     99               7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep distinct/unique rows — distinct","title":"Keep distinct/unique rows — distinct","text":"Keep unique/distinct rows data frame. similar unique.data.frame() considerably faster.","code":""},{"path":"/reference/distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep distinct/unique rows — distinct","text":"object type .data. output following properties: Rows subset input appear order. Columns modified ... empty .keep_all TRUE. Otherwise, distinct() first calls mutate() create new columns. Groups modified. Data frame attributes preserved.","code":""},{"path":"/reference/distinct.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep distinct/unique rows — distinct","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":"/reference/distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep distinct/unique rows — distinct","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>    distinct(sample_id) #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 2 × 1 #>   sample_id #>   <chr>     #> 1 section1  #> 2 section2"},{"path":"/reference/drop_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove class to abject — drop_class","title":"Remove class to abject — drop_class","text":"Remove class abject","code":""},{"path":"/reference/drop_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove class to abject — drop_class","text":"","code":"drop_class(var, name)"},{"path":"/reference/drop_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove class to abject — drop_class","text":"var tibble name character name class","code":""},{"path":"/reference/drop_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove class to abject — drop_class","text":"tibble additional attribute","code":""},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a character column into multiple columns using regular\nexpression groups — extract","title":"Extract a character column into multiple columns using regular\nexpression groups — extract","text":"extract() superseded favour separate_wider_regex() polished API better handling problems. Superseded functions go away, receive critical bug fixes. Given regular expression capturing groups, extract() turns group new column. groups match, input NA, output NA.","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a character column into multiple columns using regular\nexpression groups — extract","text":"","code":"# S3 method for SpatialExperiment extract(   data,   col,   into,   regex = \"([[:alnum:]]+)\",   remove = TRUE,   convert = FALSE,   ... )"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a character column into multiple columns using regular\nexpression groups — extract","text":"data data frame. col <tidy-select> Column expand. Names new variables create character vector. Use NA omit variable output. regex string representing regular expression used extract desired values. one group (defined ()) element . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. ... Additional arguments passed methods.","code":""},{"path":"/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a character column into multiple columns using regular\nexpression groups — extract","text":"tidySpatialExperiment","code":""},{"path":[]},{"path":"/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a character column into multiple columns using regular\nexpression groups — extract","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>      extract(col = array_row, into = \"A\", regex = \"([[:digit:]]3)\") #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue A     array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>     <chr>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE     NA           16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE      NA          102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE      NA           43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE      NA           19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE      NA           94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE     43            9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE     NA           13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE     73           43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE     NA            0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE     NA           97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter","title":"Keep rows that match a condition — filter","text":"filter() function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"/reference/filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter","text":"","code":"# S3 method for SpatialExperiment filter(.data, ..., .preserve = FALSE)"},{"path":"/reference/filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"/reference/filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep rows that match a condition — filter","text":"object type .data. output following properties: Rows subset input, appear order. Columns modified. number groups may reduced (.preserve TRUE). Data frame attributes preserved.","code":""},{"path":"/reference/filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep rows that match a condition — filter","text":"filter() function used subset rows .data, applying expressions ... column values determine rows retained. can applied grouped ungrouped data (see group_by() ungroup()). However, dplyr yet smart enough optimise filtering operation grouped datasets need grouped calculations. reason, filtering often considerably faster ungrouped data.","code":""},{"path":"/reference/filter.html","id":"useful-filter-functions","dir":"Reference","previous_headings":"","what":"Useful filter functions","title":"Keep rows that match a condition — filter","text":"many functions operators useful constructing expressions used filter data: ==, >, >= etc &, |, !, xor() .na() (), near()","code":""},{"path":"/reference/filter.html","id":"grouped-tibbles","dir":"Reference","previous_headings":"","what":"Grouped tibbles","title":"Keep rows that match a condition — filter","text":"filtering expressions computed within groups, may yield different results grouped tibbles. case soon aggregating, lagging, ranking function involved. Compare ungrouped filtering:   grouped equivalent:   ungrouped version, filter() compares value mass row global average (taken whole data set), keeping rows mass greater global average. contrast, grouped version calculates average mass separately gender group, keeps rows mass greater relevant within-gender average.","code":"starwars %>% filter(mass > mean(mass, na.rm = TRUE)) starwars %>% group_by(gender) %>% filter(mass > mean(mass, na.rm = TRUE))"},{"path":"/reference/filter.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep rows that match a condition — filter","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame, ts), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     filter(in_tissue == TRUE) #> # A SpatialExperiment-tibble abstraction: 44 × 7 #> # Features=50 | Cells=44 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  2 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  3 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  4 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  5 AAACCGGGTAGGTACC-1 TRUE             42        28 section1                3138 #>  6 AAACCGTTCGTCCAGG-1 TRUE             52        42 section1                4101 #>  7 AAACCTCATGAAGTTG-1 TRUE             37        19 section1                2519 #>  8 AAACGAAGAACATACC-1 TRUE              6        64 section1                5615 #>  9 AAACGAGACGGTTGAT-1 TRUE             35        79 section1                6647 #> 10 AAACGGTTGCGAACTG-1 TRUE             67        59 section1                5271 #> # ℹ 34 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/formatting.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing tibbles — formatting","title":"Printing tibbles — formatting","text":"One main features tbl_df class printing: Tibbles print many rows columns fit one screen, supplemented summary remaining rows columns. Tibble reveals type column, keeps user informed whether variable , e.g., <chr> <fct> (character versus factor). See vignette(\"types\") overview common type abbreviations. Printing can tweaked one-call calling print() explicitly setting arguments like n width. persistent control available setting options described pillar::pillar_options. See also vignette(\"digits\") comparison base options, vignette(\"numbers\") showcases num() char() creating columns custom formatting options. tibble 3.1.0, printing handled entirely pillar package. implement package extends tibble, printed output can customized various ways. See vignette(\"extending\", package = \"pillar\") details, pillar::pillar_options options control display console.","code":""},{"path":"/reference/formatting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing tibbles — formatting","text":"","code":"# S3 method for SpatialExperiment print(x, ..., n = NULL, width = NULL)"},{"path":"/reference/formatting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing tibbles — formatting","text":"x Object format print. ... Passed tbl_format_setup(). n Number rows show. NULL, default, print rows less print_max option. Otherwise, print many rows specified print_min option. width Width text output generate. defaults NULL, means use width option.","code":""},{"path":"/reference/formatting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing tibbles — formatting","text":"Prints message console describing contents tidySingleCellExperiment.","code":""},{"path":"/reference/formatting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing tibbles — formatting","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     print() #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ggplot from a tidySpatialExperiment — ggplot","title":"Create a new ggplot from a tidySpatialExperiment — ggplot","text":"ggplot() initializes ggplot object. can used declare input data frame graphic specify set plot aesthetics intended common throughout subsequent layers unless specifically overridden.","code":""},{"path":"/reference/ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ggplot from a tidySpatialExperiment — ggplot","text":"ggplot","code":""},{"path":"/reference/ggplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new ggplot from a tidySpatialExperiment — ggplot","text":"ggplot() used construct initial plot object, almost always followed plus sign (+) add components plot. three common patterns used invoke ggplot(): ggplot(data = df, mapping = aes(x, y, aesthetics)) ggplot(data = df) ggplot() first pattern recommended layers use data set aesthetics, although method can also used adding layer using data another data frame. second pattern specifies default data frame use plot, aesthetics defined front. useful one data frame used predominantly plot, aesthetics vary one layer another. third pattern initializes skeleton ggplot object, fleshed layers added. useful multiple data frames used produce different layers, often case complex graphics. data = mapping = specifications arguments optional (often omitted practice), long data mapping values passed function right order. examples , however, left place clarity.","code":""},{"path":"/reference/ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new ggplot from a tidySpatialExperiment — ggplot","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     ggplot(ggplot2::aes(x = .cell, y = array_row)) +     ggplot2::geom_point()"},{"path":"/reference/glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a glimpse of your data — glimpse","title":"Get a glimpse of your data — glimpse","text":"glimpse() like transposed version print(): columns run page, data runs across. makes possible see every column data frame. little like str() applied data frame tries show much data possible. (always shows underlying data, even applied remote data source.) See format_glimpse() details formatting.","code":""},{"path":"/reference/glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a glimpse of your data — glimpse","text":"x original x (invisibly) returned, allowing glimpse() used within data pipe line.","code":""},{"path":"/reference/glimpse.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Get a glimpse of your data — glimpse","text":"glimpse S3 generic customised method tbls data.frames, default method calls str().","code":""},{"path":"/reference/glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a glimpse of your data — glimpse","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     glimpse() #> Formal class 'SpatialExperiment' [package \"SpatialExperiment\"] with 9 slots #>   ..@ int_elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   ..@ int_colData        :Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   ..@ int_metadata       :List of 5 #>   .. ..$ version         :Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ spatialDataNames: chr(0)  #>   .. ..$ version         :Classes 'package_version', 'numeric_version'  hidden list of 1 #>   .. ..$ spatialDataNames: chr(0)  #>   .. ..$ imgData         :Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   ..@ rowRanges          :Formal class 'CompressedGRangesList' [package \"GenomicRanges\"] with 5 slots #>   ..@ colData            :Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   ..@ assays             :Formal class 'SimpleAssays' [package \"SummarizedExperiment\"] with 1 slot #>   ..@ NAMES              : NULL #>   ..@ elementMetadata    :Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   ..@ metadata           : list()"},{"path":"/reference/group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by one or more variables — group_by","title":"Group by one or more variables — group_by","text":"data operations done groups defined variables. group_by() takes existing tbl converts grouped tbl operations performed \"group\". ungroup() removes grouping.","code":""},{"path":"/reference/group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group by one or more variables — group_by","text":"grouped data frame class grouped_df, unless combination ... add yields empty set grouping columns, case tibble returned.","code":""},{"path":"/reference/group_by.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Group by one or more variables — group_by","text":"function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: group_by(): dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) . ungroup(): dplyr (data.frame, grouped_df, rowwise_df), plotly (plotly) .","code":""},{"path":"/reference/group_by.html","id":"ordering","dir":"Reference","previous_headings":"","what":"Ordering","title":"Group by one or more variables — group_by","text":"Currently, group_by() internally orders groups ascending order. results ordered output functions aggregate groups, summarise(). used grouping columns, character vectors ordered C locale performance reproducibility across R sessions. resulting ordering grouped operation matters dependent locale, follow grouped operation explicit call arrange() set .locale argument. example:   often useful preliminary step generating content intended humans, HTML table.","code":"data %>%   group_by(chr) %>%   summarise(avg = mean(x)) %>%   arrange(chr, .locale = \"en\")"},{"path":"/reference/group_by.html","id":"legacy-behavior","dir":"Reference","previous_headings":"","what":"Legacy behavior","title":"Group by one or more variables — group_by","text":"Prior dplyr 1.1.0, character vector grouping columns ordered system locale. need temporarily revert behavior, can set global option dplyr.legacy_locale TRUE, used sparingly expect option removed future version dplyr. better update existing code explicitly call arrange(.locale = ) instead. Note setting dplyr.legacy_locale also force calls arrange() use system locale.","code":""},{"path":[]},{"path":"/reference/group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by one or more variables — group_by","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     group_by(sample_id) #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 99 × 7 #> # Groups:   sample_id [2] #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/inner_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — inner_join","title":"Mutating joins — inner_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/inner_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — inner_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/inner_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — inner_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/inner_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — inner_join","text":"","code":"# S3 method for SpatialExperiment inner_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/inner_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — inner_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/inner_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — inner_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/inner_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — inner_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/inner_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — inner_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . left_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . right_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . full_join():  (SingleCellExperiment), dplyr (data.frame), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/inner_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — inner_join","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     inner_join(         spe |>             filter(in_tissue == TRUE) |>             mutate(new_column = 1)         ) #> Joining with `by = join_by(.cell, in_tissue, array_row, array_col, sample_id)` #> # A SpatialExperiment-tibble abstraction: 44 × 8 #> # Features=50 | Cells=44 | Assays=counts #>    .cell   in_tissue array_row array_col sample_id new_column pxl_col_in_fullres #>    <chr>   <lgl>         <int>     <int> <chr>          <dbl>              <int> #>  1 AAACAA… TRUE             50       102 section1           1               8230 #>  2 AAACAA… TRUE              3        43 section1           1               4170 #>  3 AAACAC… TRUE             59        19 section1           1               2519 #>  4 AAACAG… TRUE             14        94 section1           1               7679 #>  5 AAACCG… TRUE             42        28 section1           1               3138 #>  6 AAACCG… TRUE             52        42 section1           1               4101 #>  7 AAACCT… TRUE             37        19 section1           1               2519 #>  8 AAACGA… TRUE              6        64 section1           1               5615 #>  9 AAACGA… TRUE             35        79 section1           1               6647 #> 10 AAACGG… TRUE             67        59 section1           1               5271 #> # ℹ 34 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/join_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and join information for features. — join_features","title":"Extract and join information for features. — join_features","text":"join_features() extracts joins information specified features","code":""},{"path":"/reference/join_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and join information for features. — join_features","text":".data SpatialExperiment object features vector feature identifiers join TRUE return exclude_zeros TRUE exclude zero values shape Format returned table \"long\" \"wide\" ... Parameters pass join wide, .e. assay name extract feature abundance gene prefix, shape=\"wide\"","code":""},{"path":"/reference/join_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and join information for features. — join_features","text":"object containing information.specified features","code":""},{"path":"/reference/join_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and join information for features. — join_features","text":"function extracts information specified features returns information either long wide format.","code":""},{"path":"/reference/join_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and join information for features. — join_features","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     join_features(features = \"ENSMUSG00000025900\") #> tidySpatialExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 99 × 7 #>    .cell      in_tissue array_row array_col sample_id .feature .abundance_counts #>    <chr>      <lgl>         <int>     <int> <chr>     <chr>                <dbl> #>  1 AAACAACGA… FALSE             0        16 section1  ENSMUSG…                 0 #>  2 AAACAAGTA… TRUE             50       102 section1  ENSMUSG…                 0 #>  3 AAACAATCT… TRUE              3        43 section1  ENSMUSG…                 0 #>  4 AAACACCAA… TRUE             59        19 section1  ENSMUSG…                 0 #>  5 AAACAGAGC… TRUE             14        94 section1  ENSMUSG…                 0 #>  6 AAACAGCTT… FALSE            43         9 section1  ENSMUSG…                 0 #>  7 AAACAGGGT… FALSE            47        13 section1  ENSMUSG…                 0 #>  8 AAACAGTGT… FALSE            73        43 section1  ENSMUSG…                 0 #>  9 AAACATGGT… FALSE            62         0 section1  ENSMUSG…                 0 #> 10 AAACATTTC… FALSE            61        97 section1  ENSMUSG…                 0 #> # ℹ 89 more rows"},{"path":"/reference/left_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — left_join","title":"Mutating joins — left_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/left_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — left_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/left_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — left_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/left_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — left_join","text":"","code":"# S3 method for SpatialExperiment left_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/left_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — left_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/left_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — left_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/left_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — left_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/left_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — left_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . left_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . right_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . full_join():  (SingleCellExperiment), dplyr (data.frame), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/left_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — left_join","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     left_join(         spe |>             filter(in_tissue == TRUE) |>             mutate(new_column = 1)         ) #> Joining with `by = join_by(.cell, in_tissue, array_row, array_col, sample_id)` #> # A SpatialExperiment-tibble abstraction: 99 × 8 #> # Features=50 | Cells=99 | Assays=counts #>    .cell   in_tissue array_row array_col sample_id new_column pxl_col_in_fullres #>    <chr>   <lgl>         <int>     <int> <chr>          <dbl>              <int> #>  1 AAACAA… FALSE             0        16 section1          NA               2312 #>  2 AAACAA… TRUE             50       102 section1           1               8230 #>  3 AAACAA… TRUE              3        43 section1           1               4170 #>  4 AAACAC… TRUE             59        19 section1           1               2519 #>  5 AAACAG… TRUE             14        94 section1           1               7679 #>  6 AAACAG… FALSE            43         9 section1          NA               1831 #>  7 AAACAG… FALSE            47        13 section1          NA               2106 #>  8 AAACAG… FALSE            73        43 section1          NA               4170 #>  9 AAACAT… FALSE            62         0 section1          NA               1212 #> 10 AAACAT… FALSE            61        97 section1          NA               7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — mutate","title":"Create, modify, and delete columns — mutate","text":"mutate() creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — mutate","text":"","code":"# S3 method for SpatialExperiment mutate(.data, ...)"},{"path":"/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — mutate","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"/reference/mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create, modify, and delete columns — mutate","text":"object type .data. output following properties: Columns .data preserved according .keep argument. Existing columns modified ... always returned original location. New columns created ... placed according ..arguments. number rows affected. Columns given value NULL removed. Groups recomputed grouping variable mutated. Data frame attributes preserved.","code":""},{"path":"/reference/mutate.html","id":"useful-mutate-functions","dir":"Reference","previous_headings":"","what":"Useful mutate functions","title":"Create, modify, and delete columns — mutate","text":"+, -, log(), etc., usual mathematical meanings lead(), lag() dense_rank(), min_rank(), percent_rank(), row_number(), cume_dist(), ntile() cumsum(), cummean(), cummin(), cummax(), cumany(), cumall() na_if(), coalesce() if_else(), recode(), case_when()","code":""},{"path":"/reference/mutate.html","id":"grouped-tibbles","dir":"Reference","previous_headings":"","what":"Grouped tibbles","title":"Create, modify, and delete columns — mutate","text":"mutating expressions computed within groups, may yield different results grouped tibbles. case soon aggregating, lagging, ranking function involved. Compare ungrouped mutate:   grouped equivalent:   former normalises mass global average whereas latter normalises averages within species levels.","code":"starwars %>%   select(name, mass, species) %>%   mutate(mass_norm = mass / mean(mass, na.rm = TRUE)) starwars %>%   select(name, mass, species) %>%   group_by(species) %>%   mutate(mass_norm = mass / mean(mass, na.rm = TRUE))"},{"path":"/reference/mutate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create, modify, and delete columns — mutate","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — mutate","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     mutate(array_col = 1) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <dbl> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0         1 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50         1 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3         1 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59         1 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14         1 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         1 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47         1 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73         1 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         1 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61         1 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest rows into a list-column of data frames — nest","title":"Nest rows into a list-column of data frames — nest","text":"Nesting creates list-column data frames; unnesting flattens back regular columns. Nesting implicitly summarising operation: get one row group defined non-nested columns. useful conjunction summaries work whole datasets, notably models. Learn vignette(\"nest\").","code":""},{"path":"/reference/nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest rows into a list-column of data frames — nest","text":"","code":"# S3 method for SpatialExperiment nest(.data, ..., .names_sep = NULL)"},{"path":"/reference/nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest rows into a list-column of data frames — nest","text":".data data frame. ... <tidy-select> Columns nest; appear inner data frames. Specified using name-variable pairs form new_col = c(col1, col2, col3). right hand side can valid tidyselect expression. supplied, ... derived columns selected ., use column name .key. : previously write df %>% nest(x, y, z). Convert df %>% nest(data = c(x, y, z)). .names_sep NULL, default, inner names come former outer names. string,  new inner names use outer names names_sep automatically stripped. makes names_sep roughly symmetric nesting unnesting.","code":""},{"path":"/reference/nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest rows into a list-column of data frames — nest","text":"tidySpatialExperiment_nested","code":""},{"path":"/reference/nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest rows into a list-column of data frames — nest","text":"neither ... .supplied, nest() nest variables, use column name supplied .key.","code":""},{"path":"/reference/nest.html","id":"new-syntax","dir":"Reference","previous_headings":"","what":"New syntax","title":"Nest rows into a list-column of data frames — nest","text":"tidyr 1.0.0 introduced new syntax nest() unnest() designed similar functions. Converting new syntax straightforward (guided message receive) just need run old analysis, can easily revert previous behaviour using nest_legacy() unnest_legacy() follows:","code":"library(tidyr) nest <- nest_legacy unnest <- unnest_legacy"},{"path":"/reference/nest.html","id":"grouped-data-frames","dir":"Reference","previous_headings":"","what":"Grouped data frames","title":"Nest rows into a list-column of data frames — nest","text":"df %>% nest(data = c(x, y)) specifies columns nested; .e. columns appear inner data frame. df %>% nest(.= c(x, y)) specifies columns nest ; .e. columns remain outer data frame. alternative way achieve latter nest() grouped data frame created dplyr::group_by(). grouping variables remain outer data frame others nested. result preserves grouping input. Variables supplied nest() override grouping variables df %>% group_by(x, y) %>% nest(data = !z) equivalent df %>% nest(data = !z). supply .grouped data frame, groups already represent nesting .","code":""},{"path":"/reference/nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest rows into a list-column of data frames — nest","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     nest(data = -sample_id) #> # A tibble: 2 × 2 #>   sample_id data            #>   <chr>     <list>          #> 1 section1  <SptlExpr[,50]> #> 2 section2  <SptlExpr[,49]>"},{"path":"/reference/pivot_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from wide to long — pivot_longer","title":"Pivot data from wide to long — pivot_longer","text":"pivot_longer() \"lengthens\" data, increasing number rows decreasing number columns. inverse transformation pivot_wider() Learn vignette(\"pivot\").","code":""},{"path":"/reference/pivot_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot data from wide to long — pivot_longer","text":"tidySingleCellExperiment","code":""},{"path":"/reference/pivot_longer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot data from wide to long — pivot_longer","text":"pivot_longer() updated approach gather(), designed simpler use handle use cases. recommend use pivot_longer() new code; gather() going away longer active development.","code":""},{"path":"/reference/pivot_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot data from wide to long — pivot_longer","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     pivot_longer(c(array_row, array_col), names_to = \"dimension\", values_to = \"location\") #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 198 × 7 #>    .cell     in_tissue sample_id pxl_col_in_fullres pxl_row_in_fullres dimension #>    <chr>     <lgl>     <chr>                  <int>              <int> <chr>     #>  1 AAACAACG… FALSE     section1                2312               1252 array_row #>  2 AAACAACG… FALSE     section1                2312               1252 array_col #>  3 AAACAAGT… TRUE      section1                8230               7237 array_row #>  4 AAACAAGT… TRUE      section1                8230               7237 array_col #>  5 AAACAATC… TRUE      section1                4170               1611 array_row #>  6 AAACAATC… TRUE      section1                4170               1611 array_col #>  7 AAACACCA… TRUE      section1                2519               8315 array_row #>  8 AAACACCA… TRUE      section1                2519               8315 array_col #>  9 AAACAGAG… TRUE      section1                7679               2927 array_row #> 10 AAACAGAG… TRUE      section1                7679               2927 array_col #> # ℹ 188 more rows #> # ℹ 1 more variable: location <int>"},{"path":"/reference/plot_ly.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate a plotly visualization — plot_ly","title":"Initiate a plotly visualization — plot_ly","text":"function maps R objects plotly.js, (MIT licensed) web-based interactive charting library. provides abstractions common things (e.g. mapping data values fill colors (via color) creating animations (via frame)) sets different defaults make interface feel 'R-like' (.e., closer plot() ggplot2::qplot()).","code":""},{"path":"/reference/plot_ly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate a plotly visualization — plot_ly","text":"","code":"# S3 method for SpatialExperiment plot_ly(   data = data.frame(),   ...,   type = NULL,   name = NULL,   color = NULL,   colors = NULL,   alpha = NULL,   stroke = NULL,   strokes = NULL,   alpha_stroke = 1,   size = NULL,   sizes = c(10, 100),   span = NULL,   spans = c(1, 20),   symbol = NULL,   symbols = NULL,   linetype = NULL,   linetypes = NULL,   split = NULL,   frame = NULL,   width = NULL,   height = NULL,   source = \"A\" )"},{"path":"/reference/plot_ly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate a plotly visualization — plot_ly","text":"data data frame (optional) crosstalk::SharedData object. ... Arguments (.e., attributes) passed along trace type. See schema() list acceptable attributes given trace type (going traces -> type -> attributes). Note attributes provided level may override arguments (e.g. plot_ly(x = 1:10, y = 1:10, color = (\"red\"), marker = list(color = \"blue\"))). type character string specifying trace type (e.g. \"scatter\", \"bar\", \"box\", etc). specified, always creates trace, otherwise name Values mapped trace's name attribute. Since trace can one name, argument acts much like split creates one trace every unique value. color Values mapped relevant 'fill-color' attribute(s) (e.g. fillcolor, marker.color, textfont.color, etc.). mapping data values color codes may controlled using colors alpha, avoided altogether via () (e.g., color = (\"red\")). color understood grDevices::col2rgb() may used way. colors Either colorbrewer2.org palette name (e.g. \"YlOrRd\" \"Blues\"), vector colors interpolate hexadecimal \"#RRGGBB\" format, color interpolation function like colorRamp(). alpha number 0 1 specifying alpha channel applied color. Defaults 0.5 mapping fillcolor 1 otherwise. stroke Similar color, values mapped relevant 'stroke-color' attribute(s) (e.g., marker.line.color line.color filled polygons). specified, stroke inherits color. strokes Similar colors, controls stroke mapping. alpha_stroke Similar alpha, applied stroke. size (Numeric) values mapped relevant 'fill-size' attribute(s) (e.g., marker.size, textfont.size, error_x.width). mapping data values symbols may controlled using sizes, avoided altogether via () (e.g., size = (30)). sizes numeric vector length 2 used scale size pixels. span (Numeric) values mapped relevant 'stroke-size' attribute(s) (e.g., marker.line.width, line.width filled polygons, error_x.thickness) mapping data values symbols may controlled using spans, avoided altogether via () (e.g., span = (30)). spans numeric vector length 2 used scale span pixels. symbol (Discrete) values mapped marker.symbol. mapping data values symbols may controlled using symbols, avoided altogether via () (e.g., symbol = (\"pentagon\")). pch value symbol name may used way. symbols character vector pch values symbol names. linetype (Discrete) values mapped line.dash. mapping data values symbols may controlled using linetypes, avoided altogether via () (e.g., linetype = (\"dash\")). lty (see par) value dash name may used way. linetypes character vector lty values dash names split (Discrete) values used create multiple traces (one trace per value). frame (Discrete) values used create animation frames. width Width pixels (optional, defaults automatic sizing). height Height pixels (optional, defaults automatic sizing). source character string length 1. Match value string source argument event_data() retrieve event data corresponding specific plot (shiny apps can multiple plots).","code":""},{"path":"/reference/plot_ly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initiate a plotly visualization — plot_ly","text":"plotly","code":""},{"path":"/reference/plot_ly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initiate a plotly visualization — plot_ly","text":"Unless type specified, function just initiates plotly object 'global' attributes passed onto downstream uses add_trace() (similar). formula must always used referencing column name(s) data (e.g. plot_ly(mtcars, x = ~wt)). Formulas optional supplying values directly, help inform default axis/scale titles (e.g., plot_ly(x = mtcars$wt) vs plot_ly(x = ~mtcars$wt))","code":""},{"path":"/reference/plot_ly.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Initiate a plotly visualization — plot_ly","text":"https://plotly-r.com/overview.html","code":""},{"path":[]},{"path":"/reference/plot_ly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initiate a plotly visualization — plot_ly","text":"Carson Sievert","code":""},{"path":"/reference/plot_ly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate a plotly visualization — plot_ly","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     plot_ly(x = ~ array_col, y = ~ array_row)   {\"x\":{\"visdat\":{\"814b72c5b6e2\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"814b72c5b6e2\",\"attrs\":{\"814b72c5b6e2\":{\"x\":{},\"y\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"array_col\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"array_row\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[16,102,43,19,94,9,13,43,0,97,117,115,124,28,42,83,19,64,4,118,79,108,126,91,23,59,118,110,70,113,67,12,19,2,105,92,48,15,122,22,54,55,62,26,106,112,27,52,15,125,102,43,19,94,9,13,43,0,97,117,115,124,28,42,83,19,64,4,118,79,108,126,91,23,59,118,110,70,113,67,12,19,2,105,92,48,15,122,22,54,55,62,26,106,112,27,52,15,125],\"y\":[0,50,3,59,14,43,47,73,62,61,3,45,54,42,52,65,37,6,58,2,35,4,70,65,1,67,14,8,66,23,45,64,45,64,71,0,10,29,26,66,62,55,24,24,10,0,51,10,37,63,50,3,59,14,43,47,73,62,61,3,45,54,42,52,65,37,6,58,2,35,4,70,65,1,67,14,8,66,23,45,64,45,64,71,0,10,29,26,66,62,55,24,24,10,0,51,10,37,63],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a single column — pull","title":"Extract a single column — pull","text":"pull() similar $. mostly useful looks little nicer pipes, also works remote data frames, can optionally name output.","code":""},{"path":"/reference/pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a single column — pull","text":"vector size .data.","code":""},{"path":"/reference/pull.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Extract a single column — pull","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":"/reference/pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a single column — pull","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     pull(in_tissue) #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE #> [25] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE #> [37]  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE #> [49]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE #> [61] FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE #> [73] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE #> [85] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE #> [97]  TRUE  TRUE FALSE"},{"path":"/reference/quo_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"Convert array quosure (e.g. c(col_a, col_b)) character vector","code":""},{"path":"/reference/quo_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"","code":"quo_names(v)"},{"path":"/reference/quo_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"v array quosures (e.g. c(col_a, col_b))","code":""},{"path":"/reference/quo_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert array of quosure (e.g. c(col_a, col_b)) into character vector — quo_names","text":"character vector","code":""},{"path":"/reference/rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename","title":"Rename columns — rename","text":"rename() changes names individual variables using new_name = old_name syntax; rename_with() renames columns using function.","code":""},{"path":"/reference/rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns — rename","text":"object type .data. output following properties: Rows affected. Column names changed; column order preserved. Data frame attributes preserved. Groups updated reflect new names.","code":""},{"path":"/reference/rename.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Rename columns — rename","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages:  (vector, Vector), dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     rename(in_liver = in_tissue) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_liver array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>        <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE            0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE            50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE             3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE            59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE            14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE           43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE           47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE           73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE           62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE           61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/right_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutating joins — right_join","title":"Mutating joins — right_join","text":"Mutating joins add columns y x, matching observations based keys. four mutating joins: inner join, three outer joins.","code":""},{"path":"/reference/right_join.html","id":"inner-join","dir":"Reference","previous_headings":"","what":"Inner join","title":"Mutating joins — right_join","text":"inner_join() keeps observations x matching key y. important property inner join unmatched rows either input included result. means generally inner joins appropriate analyses, easy lose observations.","code":""},{"path":"/reference/right_join.html","id":"outer-joins","dir":"Reference","previous_headings":"","what":"Outer joins","title":"Mutating joins — right_join","text":"three outer joins keep observations appear least one data frames: left_join() keeps observations x. right_join() keeps observations y. full_join() keeps observations x y.","code":""},{"path":"/reference/right_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutating joins — right_join","text":"","code":"# S3 method for SpatialExperiment right_join(x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ...)"},{"path":"/reference/right_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutating joins — right_join","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods.","code":""},{"path":"/reference/right_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutating joins — right_join","text":"object type x (including groups). order rows columns x preserved much possible. output following properties: rows affect join type. inner_join() returns matched x rows. left_join() returns x rows. right_join()  returns matched x rows, followed unmatched y rows. full_join()  returns x rows, followed unmatched y rows. Output columns include columns x non-key columns y. keep = TRUE, key columns y included well. non-key columns x y name, suffixes added disambiguate. keep = TRUE key columns x y name, suffixes added disambiguate well. keep = FALSE, output columns included coerced common type x y.","code":""},{"path":"/reference/right_join.html","id":"many-to-many-relationships","dir":"Reference","previous_headings":"","what":"Many-to-many relationships","title":"Mutating joins — right_join","text":"default, dplyr guards many--many relationships equality joins throwing warning. occur following true: row x matches multiple rows y. row y matches multiple rows x. typically surprising, joins involve relationship one--one, one--many, many--one, often result improperly specified join. Many--many relationships particularly problematic can result Cartesian explosion number rows returned join. many--many relationship expected, silence warning explicitly setting relationship = \"many--many\". production code, best preemptively set relationship whatever relationship expect exist keys x y, forces error occur immediately data align expectations. Inequality joins typically result many--many relationships nature, warn default, still take extra care specifying inequality join, also capability return large number rows. Rolling joins warn many--many relationships either, many rolling joins follow many--one relationship, often useful set relationship = \"many--one\" enforce . Note SQL, database providers let specify many--many relationship two tables, instead requiring create third junction table results two one--many relationships instead.","code":""},{"path":"/reference/right_join.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Mutating joins — right_join","text":"functions generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: inner_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . left_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . right_join():  (SingleCellExperiment), dplyr (data.frame), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) . full_join():  (SingleCellExperiment), dplyr (data.frame), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/right_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutating joins — right_join","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334  spe |>     right_join(         spe |>             filter(in_tissue == TRUE) |>             mutate(new_column = 1)         ) #> Joining with `by = join_by(.cell, in_tissue, array_row, array_col, sample_id)` #> # A SpatialExperiment-tibble abstraction: 44 × 8 #> # Features=50 | Cells=44 | Assays=counts #>    .cell   in_tissue array_row array_col sample_id new_column pxl_col_in_fullres #>    <chr>   <lgl>         <int>     <int> <chr>          <dbl>              <int> #>  1 AAACAA… TRUE             50       102 section1           1               8230 #>  2 AAACAA… TRUE              3        43 section1           1               4170 #>  3 AAACAC… TRUE             59        19 section1           1               2519 #>  4 AAACAG… TRUE             14        94 section1           1               7679 #>  5 AAACCG… TRUE             42        28 section1           1               3138 #>  6 AAACCG… TRUE             52        42 section1           1               4101 #>  7 AAACCT… TRUE             37        19 section1           1               2519 #>  8 AAACGA… TRUE              6        64 section1           1               5615 #>  9 AAACGA… TRUE             35        79 section1           1               6647 #> 10 AAACGG… TRUE             67        59 section1           1               5271 #> # ℹ 34 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/rowwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Group input by rows — rowwise","title":"Group input by rows — rowwise","text":"rowwise() allows compute data frame row---time. useful vectorised function exist. dplyr verbs preserve row-wise grouping. exception summarise(), return grouped_df. can explicitly ungroup ungroup() as_tibble(), convert grouped_df group_by().","code":""},{"path":"/reference/rowwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group input by rows — rowwise","text":"row-wise data frame class rowwise_df. Note rowwise_df implicitly grouped row, grouped_df.","code":""},{"path":"/reference/rowwise.html","id":"list-columns","dir":"Reference","previous_headings":"","what":"List-columns","title":"Group input by rows — rowwise","text":"rowwise exactly one row per group offers small convenience working list-columns. Normally, summarise() mutate() extract groups worth data [. index list way, get back another list. working rowwise tibble, dplyr use [[ instead [ make life little easier.","code":""},{"path":[]},{"path":"/reference/rowwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group input by rows — rowwise","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     rowwise() #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 99 × 7 #> # Rowwise:  #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/sample_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample n rows from a table — sample_n","title":"Sample n rows from a table — sample_n","text":"sample_n() sample_frac() superseded favour slice_sample(). deprecated near future, retirement means perform critical bug fixes, recommend moving newer alternative. functions superseded realised convenient two mutually exclusive arguments one function, rather two separate functions. also made clean smaller design issues sample_n()/sample_frac: connection slice() obvious. name first argument, tbl, inconsistent single table verbs use .data. size argument uses tidy evaluation, surprising undocumented. easier remove deprecated .env argument. ... suboptimal position.","code":""},{"path":"/reference/sample_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample n rows from a table — sample_n","text":"","code":"# S3 method for SpatialExperiment sample_n(tbl, size, replace = FALSE, weight = NULL, .env = NULL, ...)  # S3 method for SpatialExperiment sample_frac(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL, ...)"},{"path":"/reference/sample_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample n rows from a table — sample_n","text":"tbl data.frame. size <tidy-select> sample_n(), number rows select. sample_frac(), fraction rows select. tbl grouped, size applies group. replace Sample without replacement? weight <tidy-select> Sampling weights. must evaluate vector non-negative numbers length input. Weights automatically standardised sum 1. .env DEPRECATED. ... ignored","code":""},{"path":"/reference/sample_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample n rows from a table — sample_n","text":"tidySpatialExperiment","code":""},{"path":"/reference/sample_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample n rows from a table — sample_n","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     sample_n(10) #> # A SpatialExperiment-tibble abstraction: 10 × 7 #> # Features=50 | Cells=10 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAAGACTGGGCGCTTT-1 FALSE            29        15 section1                2243 #>  2 AAACGGGCGTACGGGT-1 FALSE            65        91 section1                7473 #>  3 AAACGGGTTGGTATCC-1 FALSE             1        23 section1                2794 #>  4 AAAGTCGACCCTCAGT-1 TRUE             37        15 section1                2244 #>  5 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #>  6 AAACTGCTGGCTCCAA-1 TRUE             45        67 section1                5821 #>  7 AAAGGGATGTAGCAAG-1 TRUE             24        62 section1                5477 #>  8 AAAGGGCAGCTTGAAT-1 TRUE             24        26 section1                3000 #>  9 AAACTCGGTTCGCAAT-1 TRUE             66        70 section1                6028 #> 10 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> # ℹ 1 more variable: pxl_row_in_fullres <int> spe |>     sample_frac(0.1) #> tidySpatialExperiment says: When sampling with replacement a data frame is returned for independent data analysis. #> # A tibble: 20 × 7 #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACGAAGATGGAGTA-1 FALSE            58         4 section1                1487 #>  2 AAACGGTTGCGAACTG-1 TRUE             67        59 section1                5271 #>  3 AAAGAATGACCTTAGA-1 FALSE            64         2 section1                1349 #>  4 AAAGAATGTGGACTAA-1 FALSE            71       105 section1                8436 #>  5 AAAGGCTCTCGCGCCG-1 TRUE             55        55 section1                4996 #>  6 AAAGGGATGTAGCAAG-1 TRUE             24        62 section1                5477 #>  7 AAAGGGATGTAGCAAG-1 TRUE             24        62 section1                5477 #>  8 AAAGGGCAGCTTGAAT-1 TRUE             24        26 section1                3000 #>  9 AAAGGGCAGCTTGAAT-1 TRUE             24        26 section1                3000 #> 10 AAAGTCGACCCTCAGT-1 TRUE             37        15 section1                2244 #> 11 AAACGAAGATGGAGTA-1 FALSE            58         4 section2                1487 #> 12 AAACGGTTGCGAACTG-1 TRUE             67        59 section2                5271 #> 13 AAAGAATGACCTTAGA-1 FALSE            64         2 section2                1349 #> 14 AAAGAATGTGGACTAA-1 FALSE            71       105 section2                8436 #> 15 AAAGGCTCTCGCGCCG-1 TRUE             55        55 section2                4996 #> 16 AAAGGGATGTAGCAAG-1 TRUE             24        62 section2                5477 #> 17 AAAGGGATGTAGCAAG-1 TRUE             24        62 section2                5477 #> 18 AAAGGGCAGCTTGAAT-1 TRUE             24        26 section2                3000 #> 19 AAAGGGCAGCTTGAAT-1 TRUE             24        26 section2                3000 #> 20 AAAGTCGACCCTCAGT-1 TRUE             37        15 section2                2244 #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop columns using their names and types — select","title":"Keep or drop columns using their names and types — select","text":"Select (optionally rename) variables data frame, using concise mini-language makes easy refer variables based name (e.g. :f selects columns left f right) type (e.g. (.numeric) selects numeric columns).","code":""},{"path":"/reference/select.html","id":"overview-of-selection-features","dir":"Reference","previous_headings":"","what":"Overview of selection features","title":"Keep or drop columns using their names and types — select","text":"Tidyverse selections implement dialect R operators make easy select variables: : selecting range consecutive variables. ! taking complement set variables. & | selecting intersection union two sets variables. c() combining selections. addition, can use selection helpers. helpers select specific columns: everything(): Matches variables. last_col(): Select last variable, possibly offset. group_cols(): Select grouping columns. helpers select variables matching patterns names: starts_with(): Starts prefix. ends_with(): Ends suffix. contains(): Contains literal string. matches(): Matches regular expression. num_range(): Matches numerical range like x01, x02, x03. variables stored character vector: all_of(): Matches variable names character vector. names must present, otherwise --bounds error thrown. any_of(): all_of(), except error thrown names exist. using predicate function: (): Applies function variables selects function returns TRUE.","code":""},{"path":"/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns using their names and types — select","text":"","code":"# S3 method for SpatialExperiment select(.data, ...)"},{"path":"/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns using their names and types — select","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep or drop columns using their names and types — select","text":"object type .data. output following properties: Rows affected. Output columns subset input columns, potentially different order. Columns renamed new_name = old_name form used. Data frame attributes preserved. Groups maintained; select grouping variables.","code":""},{"path":"/reference/select.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Keep or drop columns using their names and types — select","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySpatialExperiment (SpatialExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":"/reference/select.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select","text":"show usage basic selection operators. See specific help pages learn helpers like starts_with(). selection language can used functions like dplyr::select() tidyr::pivot_longer(). first attach tidyverse:   Select variables name:   Select multiple variables separating commas. Note order columns determined order inputs:   Functions like tidyr::pivot_longer() take variables dots. case use c() select multiple variables:","code":"library(tidyverse)  # For better printing iris <- as_tibble(iris) starwars %>% select(height) #> # A tibble: 87 x 1 #>   height #>    <int> #> 1    172 #> 2    167 #> 3     96 #> 4    202 #> # i 83 more rows  iris %>% pivot_longer(Sepal.Length) #> # A tibble: 150 x 6 #>   Sepal.Width Petal.Length Petal.Width Species name         value #>         <dbl>        <dbl>       <dbl> <fct>   <chr>        <dbl> #> 1         3.5          1.4         0.2 setosa  Sepal.Length   5.1 #> 2         3            1.4         0.2 setosa  Sepal.Length   4.9 #> 3         3.2          1.3         0.2 setosa  Sepal.Length   4.7 #> 4         3.1          1.5         0.2 setosa  Sepal.Length   4.6 #> # i 146 more rows starwars %>% select(homeworld, height, mass) #> # A tibble: 87 x 3 #>   homeworld height  mass #>   <chr>      <int> <dbl> #> 1 Tatooine     172    77 #> 2 Tatooine     167    75 #> 3 Naboo         96    32 #> 4 Tatooine     202   136 #> # i 83 more rows iris %>% pivot_longer(c(Sepal.Length, Petal.Length)) #> # A tibble: 300 x 5 #>   Sepal.Width Petal.Width Species name         value #>         <dbl>       <dbl> <fct>   <chr>        <dbl> #> 1         3.5         0.2 setosa  Sepal.Length   5.1 #> 2         3.5         0.2 setosa  Petal.Length   1.4 #> 3         3           0.2 setosa  Sepal.Length   4.9 #> 4         3           0.2 setosa  Petal.Length   1.4 #> # i 296 more rows"},{"path":"/reference/select.html","id":"operators-","dir":"Reference","previous_headings":"","what":"Operators:","title":"Keep or drop columns using their names and types — select","text":": operator selects range consecutive variables:   ! operator negates selection:   & | take intersection union two selections:   take difference two selections, combine & ! operators:","code":"starwars %>% select(name:mass) #> # A tibble: 87 x 3 #>   name           height  mass #>   <chr>           <int> <dbl> #> 1 Luke Skywalker    172    77 #> 2 C-3PO             167    75 #> 3 R2-D2              96    32 #> 4 Darth Vader       202   136 #> # i 83 more rows starwars %>% select(!(name:mass)) #> # A tibble: 87 x 11 #>   hair_color skin_color  eye_color birth_year sex   gender    homeworld species #>   <chr>      <chr>       <chr>          <dbl> <chr> <chr>     <chr>     <chr>   #> 1 blond      fair        blue            19   male  masculine Tatooine  Human   #> 2 <NA>       gold        yellow         112   none  masculine Tatooine  Droid   #> 3 <NA>       white, blue red             33   none  masculine Naboo     Droid   #> 4 none       white       yellow          41.9 male  masculine Tatooine  Human   #> # i 83 more rows #> # i 3 more variables: films <list>, vehicles <list>, starships <list>  iris %>% select(!c(Sepal.Length, Petal.Length)) #> # A tibble: 150 x 3 #>   Sepal.Width Petal.Width Species #>         <dbl>       <dbl> <fct>   #> 1         3.5         0.2 setosa  #> 2         3           0.2 setosa  #> 3         3.2         0.2 setosa  #> 4         3.1         0.2 setosa  #> # i 146 more rows  iris %>% select(!ends_with(\"Width\")) #> # A tibble: 150 x 3 #>   Sepal.Length Petal.Length Species #>          <dbl>        <dbl> <fct>   #> 1          5.1          1.4 setosa  #> 2          4.9          1.4 setosa  #> 3          4.7          1.3 setosa  #> 4          4.6          1.5 setosa  #> # i 146 more rows iris %>% select(starts_with(\"Petal\") & ends_with(\"Width\")) #> # A tibble: 150 x 1 #>   Petal.Width #>         <dbl> #> 1         0.2 #> 2         0.2 #> 3         0.2 #> 4         0.2 #> # i 146 more rows  iris %>% select(starts_with(\"Petal\") | ends_with(\"Width\")) #> # A tibble: 150 x 3 #>   Petal.Length Petal.Width Sepal.Width #>          <dbl>       <dbl>       <dbl> #> 1          1.4         0.2         3.5 #> 2          1.4         0.2         3   #> 3          1.3         0.2         3.2 #> 4          1.5         0.2         3.1 #> # i 146 more rows iris %>% select(starts_with(\"Petal\") & !ends_with(\"Width\")) #> # A tibble: 150 x 1 #>   Petal.Length #>          <dbl> #> 1          1.4 #> 2          1.4 #> 3          1.3 #> 4          1.5 #> # i 146 more rows"},{"path":[]},{"path":"/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     select(in_tissue) #> tidySpatialExperiment says: Key columns are missing. A data frame is returned for independent data analysis. #> # A tibble: 99 × 1 #>    in_tissue #>    <lgl>     #>  1 FALSE     #>  2 TRUE      #>  3 TRUE      #>  4 TRUE      #>  5 TRUE      #>  6 FALSE     #>  7 FALSE     #>  8 FALSE     #>  9 FALSE     #> 10 FALSE     #> # ℹ 89 more rows"},{"path":"/reference/separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","title":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","text":"separate() superseded favour separate_wider_position() separate_wider_delim() two functions make two uses obvious, API polished, handling problems better. Superseded functions go away, receive critical bug fixes. Given either regular expression vector character positions, separate() turns single character column multiple columns.","code":""},{"path":"/reference/separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","text":"","code":"# S3 method for SpatialExperiment separate(   data,   col,   into,   sep = \"[^[:alnum:]]+\",   remove = TRUE,   convert = FALSE,   extra = \"warn\",   fill = \"warn\",   ... )"},{"path":"/reference/separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","text":"data data frame. col <tidy-select> Column expand. Names new variables create character vector. Use NA omit variable output. sep Separator columns. character, sep interpreted regular expression. default value regular expression matches sequence non-alphanumeric values. numeric, sep interpreted character positions split . Positive values start 1 far-left string; negative value start -1 far-right string. length sep one less . remove TRUE, remove input column output data frame. convert TRUE, run type.convert() .= TRUE new columns. useful component columns integer, numeric logical. NB: cause string \"NA\"s converted NAs. extra sep character vector, controls happens many pieces. three valid options: \"warn\" (default): emit warning drop extra values. \"drop\": drop extra values without warning. \"merge\": splits length() times fill sep character vector, controls happens enough pieces. three valid options: \"warn\" (default): emit warning fill right \"right\": fill missing values right \"left\": fill missing values left ... Additional arguments passed methods.","code":""},{"path":"/reference/separate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","text":"tidySpatialExperiment","code":""},{"path":[]},{"path":"/reference/separate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a character column into multiple columns with a regular\nexpression or numeric locations — separate","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     separate(col = sample_id, into = c(\"A\", \"B\"), sep = \"[[:alnum:]]n\") #> # A SpatialExperiment-tibble abstraction: 99 × 9 #> # Features=50 | Cells=99 | Assays=counts #>    .cell  in_tissue array_row array_col A     B     sample_id pxl_col_in_fullres #>    <chr>  <lgl>         <int>     <int> <chr> <chr> <chr>                  <int> #>  1 AAACA… FALSE             0        16 secti 1     section1                2312 #>  2 AAACA… TRUE             50       102 secti 1     section1                8230 #>  3 AAACA… TRUE              3        43 secti 1     section1                4170 #>  4 AAACA… TRUE             59        19 secti 1     section1                2519 #>  5 AAACA… TRUE             14        94 secti 1     section1                7679 #>  6 AAACA… FALSE            43         9 secti 1     section1                1831 #>  7 AAACA… FALSE            47        13 secti 1     section1                2106 #>  8 AAACA… FALSE            73        43 secti 1     section1                4170 #>  9 AAACA… FALSE            62         0 secti 1     section1                1212 #> 10 AAACA… FALSE            61        97 secti 1     section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows using their positions — slice","title":"Subset rows using their positions — slice","text":"slice() lets index rows (integer) locations. allows select, remove, duplicate rows. accompanied number helpers common use cases: slice_head() slice_tail() select first last rows. slice_sample() randomly selects rows. slice_min() slice_max() select rows smallest largest values variable. .data grouped_df, operation performed group, (e.g.) slice_head(df, n = 5) select first five rows group.","code":""},{"path":"/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset rows using their positions — slice","text":"object type .data. output following properties: row may appear 0, 1, many times output. Columns modified. Groups modified. Data frame attributes preserved.","code":""},{"path":"/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset rows using their positions — slice","text":"Slice work relational databases intrinsic notion row order. want perform equivalent operation, use filter() row_number().","code":""},{"path":"/reference/slice.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Subset rows using their positions — slice","text":"function generics, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. Methods available currently loaded packages: slice():  (, integer, numeric, Rle, RleList, XDouble, XInteger), dplyr (data.frame), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) . slice_head(): dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment) . slice_tail(): dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment) . slice_min(): dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment) . slice_max(): dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment) . slice_sample(): dplyr (data.frame), tidySingleCellExperiment (SingleCellExperiment) .","code":""},{"path":[]},{"path":"/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows using their positions — slice","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>    slice(1) #> # A SpatialExperiment-tibble abstraction: 1 × 7 #> # Features=50 | Cells=1 | Assays=counts #>   .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>   <chr>              <lgl>         <int>     <int> <chr>                  <int> #> 1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #> # ℹ 1 more variable: pxl_row_in_fullres <int>"},{"path":"/reference/summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise each group down to one row — summarise","title":"Summarise each group down to one row — summarise","text":"summarise() creates new data frame. returns one row combination grouping variables; grouping variables, output single row summarising observations input. contain one column grouping variable one column summary statistics specified. summarise() summarize() synonyms.","code":""},{"path":"/reference/summarise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise each group down to one row — summarise","text":"object usually type .data. rows come underlying group_keys(). columns combination grouping keys summary expressions provide. grouping structure controlled .groups= argument, output may another grouped_df, tibble rowwise data frame. Data frame attributes preserved, summarise() fundamentally creates new data frame.","code":""},{"path":"/reference/summarise.html","id":"useful-functions","dir":"Reference","previous_headings":"","what":"Useful functions","title":"Summarise each group down to one row — summarise","text":"Center: mean(), median() Spread: sd(), IQR(), mad() Range: min(), max(), Position: first(), last(), nth(), Count: n(), n_distinct() Logical: (), ()","code":""},{"path":"/reference/summarise.html","id":"backend-variations","dir":"Reference","previous_headings":"","what":"Backend variations","title":"Summarise each group down to one row — summarise","text":"data frame backend supports creating variable using summary. means previously created summary variables can transformed combined within summary, mutate(). However, also means summary variables names previous variables overwrite , making variables unavailable later summary variables. behaviour may supported backends. avoid unexpected results, consider using new names summary variables, especially creating multiple summaries.","code":""},{"path":"/reference/summarise.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Summarise each group down to one row — summarise","text":"function generic, means packages can provide implementations (methods) classes. See documentation individual methods extra arguments differences behaviour. following methods currently available loaded packages: dplyr (data.frame, grouped_df, rowwise_df), plotly (plotly), tidySingleCellExperiment (SingleCellExperiment), tidySummarizedExperiment (SummarizedExperiment) .","code":""},{"path":[]},{"path":"/reference/summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise each group down to one row — summarise","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     summarise(mean(array_row)) #> tidySingleCellExperiment says: A data frame is returned for independent data analysis. #> # A tibble: 1 × 1 #>   `mean(array_row)` #>               <dbl> #> 1              38.1"},{"path":"/reference/tbl_format_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the header of a tibble — tbl_format_header","title":"Format the header of a tibble — tbl_format_header","text":"easier customization, formatting tibble split three components: header, body, footer. tbl_format_header() method responsible formatting header tibble. Override method need change appearance entire header. need change extend components shown header, override extend tbl_sum() class called default method.","code":""},{"path":"/reference/tbl_format_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the header of a tibble — tbl_format_header","text":"","code":"# S3 method for tidySpatialExperiment tbl_format_header(x, setup, ...)"},{"path":"/reference/tbl_format_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the header of a tibble — tbl_format_header","text":"x tibble-like object. setup setup object returned tbl_format_setup(). ... dots future extensions must empty.","code":""},{"path":"/reference/tbl_format_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the header of a tibble — tbl_format_header","text":"character vector.","code":""},{"path":"/reference/tbl_format_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the header of a tibble — tbl_format_header","text":"","code":"# TODO"},{"path":"/reference/unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite multiple columns into one by pasting strings together — unite","title":"Unite multiple columns into one by pasting strings together — unite","text":"Convenience function paste together multiple columns one.","code":""},{"path":"/reference/unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite multiple columns into one by pasting strings together — unite","text":"","code":"# S3 method for SpatialExperiment unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)"},{"path":"/reference/unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite multiple columns into one by pasting strings together — unite","text":"data data frame. col name new column, string symbol. argument passed expression supports quasiquotation (can unquote strings symbols). name captured expression rlang::ensym() (note kind interface symbols represent actual objects now discouraged tidyverse; support backward compatibility). ... <tidy-select> Columns unite sep Separator use values. remove TRUE, remove input columns output data frame. na.rm TRUE, missing values removed prior uniting value.","code":""},{"path":"/reference/unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite multiple columns into one by pasting strings together — unite","text":"tidySpatialExperiment","code":""},{"path":[]},{"path":"/reference/unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite multiple columns into one by pasting strings together — unite","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     unite(\"A\", array_row:array_col) #> # A SpatialExperiment-tibble abstraction: 99 × 6 #> # Features=50 | Cells=99 | Assays=counts #>    .cell         in_tissue A     sample_id pxl_col_in_fullres pxl_row_in_fullres #>    <chr>         <lgl>     <chr> <chr>                  <int>              <int> #>  1 AAACAACGAATA… FALSE     0_16  section1                2312               1252 #>  2 AAACAAGTATCT… TRUE      50_1… section1                8230               7237 #>  3 AAACAATCTACT… TRUE      3_43  section1                4170               1611 #>  4 AAACACCAATAA… TRUE      59_19 section1                2519               8315 #>  5 AAACAGAGCGAC… TRUE      14_94 section1                7679               2927 #>  6 AAACAGCTTTCA… FALSE     43_9  section1                1831               6400 #>  7 AAACAGGGTCTA… FALSE     47_13 section1                2106               6879 #>  8 AAACAGTGTTCC… FALSE     73_43 section1                4170               9991 #>  9 AAACATGGTGAG… FALSE     62_0  section1                1212               8674 #> 10 AAACATTTCCCG… FALSE     61_97 section1                7886               8554 #> # ℹ 89 more rows"},{"path":"/reference/unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest a list-column of data frames into rows and columns — unnest","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"Unnest expands list-column containing data frames rows columns.","code":""},{"path":"/reference/unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"","code":"# S3 method for tidySpatialExperiment_nested unnest(   data,   cols,   ...,   keep_empty = FALSE,   ptype = NULL,   names_sep = NULL,   names_repair = \"check_unique\",   .drop,   .id,   .sep,   .preserve )  unnest_single_cell_experiment(   data,   cols,   ...,   keep_empty = FALSE,   ptype = NULL,   names_sep = NULL,   names_repair = \"check_unique\",   .drop,   .id,   .sep,   .preserve )"},{"path":"/reference/unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"data data frame. cols <tidy-select> List-columns unnest. selecting multiple columns, values row recycled common size. ... : previously write df %>% unnest(x, y, z). Convert df %>% unnest(c(x, y, z)). previously created new variable unnest() now need explicitly mutate(). Convert df %>% unnest(y = fun(x, y, z)) df %>% mutate(y = fun(x, y, z)) %>% unnest(y). keep_empty default, get one row output element list unchopping/unnesting. means size-0 element (like NULL empty data frame vector), entire row dropped output. want preserve rows, use keep_empty = TRUE replace size-0 elements single row missing values. ptype Optionally, named list column name-prototype pairs coerce cols , overriding default guessed combining individual values. Alternatively, single empty ptype can supplied, applied cols. names_sep NULL, default, outer names come inner names. string, outer names formed pasting together outer inner column names, separated names_sep. names_repair Used check output data frame valid names. Must one following options: \"minimal\": name repair checks, beyond basic existence, \"unique\": make sure names unique empty, \"check_unique\": (default), name repair, check unique, \"universal\": make names unique syntactic function: apply custom name repair. tidyr_legacy: use name repair tidyr 0.8. formula: purrr-style anonymous function (see rlang::as_function()) See vctrs::vec_as_names() details terms strategies used enforce . .drop, .preserve : list-columns now preserved; want output use select() remove prior unnesting. .id : convert df %>% unnest(x, .id = \"id\") df %>% mutate(id = names(x)) %>% unnest(x)). .sep : use names_sep instead.","code":""},{"path":"/reference/unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"tidySpatialExperiment","code":""},{"path":"/reference/unnest.html","id":"new-syntax","dir":"Reference","previous_headings":"","what":"New syntax","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"tidyr 1.0.0 introduced new syntax nest() unnest() designed similar functions. Converting new syntax straightforward (guided message receive) just need run old analysis, can easily revert previous behaviour using nest_legacy() unnest_legacy() follows:","code":"library(tidyr) nest <- nest_legacy unnest <- unnest_legacy"},{"path":[]},{"path":"/reference/unnest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest a list-column of data frames into rows and columns — unnest","text":"","code":"example(read10xVisium) #>  #> rd10xV> dir <- system.file( #> rd10xV+   file.path(\"extdata\", \"10xVisium\"),  #> rd10xV+   package = \"SpatialExperiment\") #>  #> rd10xV> sample_ids <- c(\"section1\", \"section2\") #>  #> rd10xV> samples <- file.path(dir, sample_ids, \"outs\") #>  #> rd10xV> list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\"               #>  #> rd10xV> list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" #>  #> rd10xV> file.path(samples[1], \"raw_feature_bc_matrix\") #> [1] \"/Users/hutchison.w/Library/R/x86_64/4.3/library/SpatialExperiment/extdata/10xVisium/section1/outs/raw_feature_bc_matrix\" #>  #> rd10xV> (spe <- read10xVisium(samples, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # base directory 'outs/' from Space Ranger can also be omitted #> rd10xV> samples2 <- file.path(dir, sample_ids) #>  #> rd10xV> (spe2 <- read10xVisium(samples2, sample_ids,  #> rd10xV+   type = \"sparse\", data = \"raw\",  #> rd10xV+   images = \"lowres\", load = FALSE)) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int> #>  #> rd10xV> # tabulate number of spots mapped to tissue #> rd10xV> cd <- colData(spe) #>  #> rd10xV> table( #> rd10xV+   in_tissue = cd$in_tissue,  #> rd10xV+   sample_id = cd$sample_id) #>          sample_id #> in_tissue section1 section2 #>     FALSE       28       27 #>     TRUE        22       22 #>  #> rd10xV> # view available images #> rd10xV> imgData(spe) #> DataFrame with 2 rows and 4 columns #>     sample_id    image_id   data scaleFactor #>   <character> <character> <list>   <numeric> #> 1    section1      lowres   ####   0.0510334 #> 2    section2      lowres   ####   0.0510334 spe |>     nest(data = -sample_id) |>     unnest(data) #> # A SpatialExperiment-tibble abstraction: 99 × 7 #> # Features=50 | Cells=99 | Assays=counts #>    .cell              in_tissue array_row array_col sample_id pxl_col_in_fullres #>    <chr>              <lgl>         <int>     <int> <chr>                  <int> #>  1 AAACAACGAATAGTTC-1 FALSE             0        16 section1                2312 #>  2 AAACAAGTATCTCCCA-1 TRUE             50       102 section1                8230 #>  3 AAACAATCTACTAGCA-1 TRUE              3        43 section1                4170 #>  4 AAACACCAATAACTGC-1 TRUE             59        19 section1                2519 #>  5 AAACAGAGCGACTCCT-1 TRUE             14        94 section1                7679 #>  6 AAACAGCTTTCAGAAG-1 FALSE            43         9 section1                1831 #>  7 AAACAGGGTCTATATT-1 FALSE            47        13 section1                2106 #>  8 AAACAGTGTTCCTGGG-1 FALSE            73        43 section1                4170 #>  9 AAACATGGTGAGAGGA-1 FALSE            62         0 section1                1212 #> 10 AAACATTTCCCGGATT-1 FALSE            61        97 section1                7886 #> # ℹ 89 more rows #> # ℹ 1 more variable: pxl_row_in_fullres <int>"}]
