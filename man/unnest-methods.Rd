% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidyr_methods.R
\name{unnest}
\alias{unnest}
\alias{unnest.tidySpatialExperiment_nested}
\alias{unnest_single_cell_experiment}
\title{unnest}
\usage{
\method{unnest}{tidySpatialExperiment_nested}(
  data,
  cols,
  ...,
  keep_empty = FALSE,
  ptype = NULL,
  names_sep = NULL,
  names_repair = "check_unique",
  .drop,
  .id,
  .sep,
  .preserve
)

unnest_single_cell_experiment(
  data,
  cols,
  ...,
  keep_empty = FALSE,
  ptype = NULL,
  names_sep = NULL,
  names_repair = "check_unique",
  .drop,
  .id,
  .sep,
  .preserve
)
}
\arguments{
\item{data}{A tbl. (See tidyr)}

\item{cols}{<\code{\link[=tidyr_tidy_select]{tidy-select}}> Columns to unnest.
If you \code{unnest()} multiple columns, parallel entries must be of
compatible sizes, i.e. they're either equal or length 1 (following the
standard tidyverse recycling rules).}

\item{...}{<\code{\link[=tidyr_tidy_select]{tidy-select}}> Columns to nest, specified
using name-variable pairs of the form \code{new_col=c(col1, col2, col3)}.
The right hand side can be any valid tidy select expression.

\Sexpr[results=rd, stage=render]{lifecycle::badge("deprecated")}:
previously you could write \code{df \%>\% nest(x, y, z)} and \code{df \%>\% unnest(x, y, z)}. Convert to \code{df \%>\% nest(data=c(x, y, z))}.
and \code{df \%>\% unnest(c(x, y, z))}.

If you previously created new variable in \code{unnest()} you'll now need to
do it explicitly with \code{mutate()}. Convert \code{df \%>\% unnest(y=fun(x, y, z))}
to \code{df \%>\% mutate(y=fun(x, y, z)) \%>\% unnest(y)}.}

\item{keep_empty}{See tidyr::unnest}

\item{ptype}{See tidyr::unnest}

\item{names_sep}{If \code{NULL}, the default, the names will be left
as is. In \code{nest()}, inner names will come from the former outer names;
in \code{unnest()}, the new outer names will come from the inner names.

If a string, the inner and outer names will be used together. In \code{nest()},
the names of the new outer columns will be formed by pasting together the
outer and the inner column names, separated by \code{names_sep}. In \code{unnest()},
the new inner names will have the outer names (+ \code{names_sep}) automatically
stripped. This makes \code{names_sep} roughly symmetric between nesting and unnesting.}

\item{names_repair}{See tidyr::unnest}

\item{.drop}{See tidyr::unnest}

\item{.id}{tidyr::unnest}

\item{.sep}{tidyr::unnest}

\item{.preserve}{See tidyr::unnest}

\item{sep}{tidyr::unnest}
}
\value{
A tidySpatialExperiment objector a tibble depending on input

A tidySpatialExperiment objector a tibble depending on input
}
\description{
unnest

unnest_single_cell_experiment
}
\examples{

library(dplyr)
pbmc_small \%>\%

    nest(data=-groups) \%>\%
    unnest(data)


library(dplyr)
pbmc_small \%>\%

    nest(data=-groups) \%>\%
    unnest_single_cell_experiment(data)

}
